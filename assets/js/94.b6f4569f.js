(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{410:function(e,t,n){"use strict";n.r(t);var a=n(1),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"受控和非受控组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#受控和非受控组件"}},[e._v("#")]),e._v(" 受控和非受控组件")]),e._v(" "),t("h2",{attrs:{id:"ref的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ref的使用"}},[e._v("#")]),e._v(" ref的使用")]),e._v(" "),t("p",[e._v("在React的开发模式中，通常情况下不需要、也不建议直接操作DOM元素，但是某些特殊的情况，确实需要获取到DOM进行某些操作：")]),e._v(" "),t("ul",[t("li",[e._v("管理焦点，文本选择或媒体播放。")]),e._v(" "),t("li",[e._v("触发强制动画。")]),e._v(" "),t("li",[e._v("集成第三方 DOM 库。")])]),e._v(" "),t("h3",{attrs:{id:"创建ref的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建ref的方式"}},[e._v("#")]),e._v(" 创建ref的方式")]),e._v(" "),t("p",[e._v("如何创建refs来获取对应的DOM呢？目前有三种方式：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("方式一：传入字符串")])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("使用时通过 "),t("code",[e._v("this.refs.传入的字符串")]),e._v("格式获取对应的元素；")])])]),e._v(" "),t("li",[t("p",[e._v("方式二：传入一个对象")])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("对象是通过 "),t("code",[e._v("React.createRef()")]),e._v(" 方式创建出来的；")]),e._v(" "),t("li",[e._v("使用时获取到创建的对象其中有一个"),t("code",[e._v("current")]),e._v("属性就是对应的元素；")])])]),e._v(" "),t("li",[t("p",[e._v("方式三：传入一个函数")])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("该函数会在DOM被挂载时进行回调，这个函数会传入一个 元素对象，我们可以自己保存；")]),e._v(" "),t("li",[e._v("使用时，直接拿到之前保存的元素对象即可；")])])]),e._v(" "),t("li",[t("p",[e._v("代码：")])]),e._v(" "),t("li",[t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import React, { PureComponent, createRef } from 'react'\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.titleRef = createRef();\n    this.titleEl = null;\n  }\n\n  render() {\n    return (\n      <div>\n        {/* 字符串方式 不推荐 */}\n        <h2 ref=\"titleRef\">Hello React StringRef</h2>\n        {/* 传入对象方式 推荐方式 */}\n        <h2 ref={this.titleRef}>Hello React createRef</h2>\n        {/* 函数方式 */}\n        <h2 ref={element => this.titleEl = element}>Hello React createRef</h2>\n\n        <button onClick={this.changeText.bind(this)}>改变文本</button>\n      </div>\n    )\n  }\n\n  changeText() {\n    this.refs.titleRef.innerHTML = 'Hello Ref';\n\n    this.titleRef.current.innerHTML = 'Hello Ref';\n\n    this.titleEl.innerHTML = 'Hello Ref';\n  }\n}\n")])])])]),e._v(" "),t("li",[t("h3",{attrs:{id:"ref节点的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ref节点的类型"}},[e._v("#")]),e._v(" ref节点的类型")])]),e._v(" "),t("li",[t("p",[e._v("ref 的值根据节点的类型而有所不同：")])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("当 "),t("code",[e._v("ref")]),e._v(" 属性用于 HTML 元素时，构造函数中使用 "),t("code",[e._v("React.createRef()")]),e._v(" 创建的 "),t("code",[e._v("ref")]),e._v(" 接收底层 DOM 元素作为其 "),t("code",[e._v("current")]),e._v(" 属性；")]),e._v(" "),t("li",[e._v("当 "),t("code",[e._v("ref")]),e._v(" 属性用于自定义 class 组件时，"),t("code",[e._v("ref")]),e._v(" 对象接收组件的挂载实例作为其 "),t("code",[e._v("current")]),e._v(" 属性；")]),e._v(" "),t("li",[t("strong",[e._v("你不能在函数组件上使用 "),t("code",[e._v("ref")]),e._v(" 属性")]),e._v("，因为他们没有实例；")])])]),e._v(" "),t("li",[t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import React, { PureComponent, createRef } from 'react';\n\nclass Counter extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>当前计数: {this.state.counter}</h2>\n        <button onClick={e => this.increment()}>+1</button>\n      </div>\n    )\n  }\n\n  increment() {\n    this.setState({\n      counter: this.state.counter + 1\n    })\n  }\n}\n\nfunction Greeting() {\n  return (\n    <h2>Hello!</h2>\n  );\n}\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.titleRef = createRef();\n    this.counterRef = createRef();\n    this.greetingRef = createRef();\n  }\n\n  render() {\n    return (\n      <div>\n        <h2 ref={this.titleRef}>Hello Ref</h2>\n        <Greeting ref={this.greetingRef}/>\n        <Counter ref={this.counterRef}/>\n        <button onClick={e => this.increment()}>app +1</button>\n      </div>\n    )\n  }\n\n  increment() {\n    console.log('titleRef', this.titleRef) // h2\n    console.log('counterRef', this.counterRef) // Counter\n    console.log('greetingRef', this.greetingRef) // null\n    this.counterRef.current.increment();\n  }\n}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("函数式组件是没有实例的，所以无法通过ref获取他们的实例：")])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("但是某些时候，我们可能想要获取函数式组件中的某个DOM元素；")]),e._v(" "),t("li",[e._v("这个时候我们可以通过 "),t("code",[e._v("React.forwardRef")]),e._v(" ，后面我们也会学习 hooks 中如何使用ref；")])])]),e._v(" "),t("li",[t("h2",{attrs:{id:"受控组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#受控组件"}},[e._v("#")]),e._v(" 受控组件")])]),e._v(" "),t("li",[t("p",[e._v("在 HTML 中，表单元素（如"),t("code",[e._v("<input>")]),e._v("、 "),t("code",[e._v("<textarea>")]),e._v(" 和 "),t("code",[e._v("<select>")]),e._v("）之类的表单元素通常自己维护 state，并根据用户输入进行更新。")])]),e._v(" "),t("li",[t("p",[e._v("而在 React 中，可变状态（mutable state）通常保存在组件的 state 属性中，并且只能通过使用 "),t("code",[e._v("setState()")]),e._v("来更新。")])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("我们将两者结合起来，使React的state成为“唯一数据源”；")]),e._v(" "),t("li",[e._v("渲染表单的 React 组件还控制着用户输入过程中表单发生的操作；")]),e._v(" "),t("li",[e._v("被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”；")])])]),e._v(" "),t("li",[t("p",[e._v("例如，如果我们想让前一个示例在提交时打印出名称，我们可以将表单写为受控组件：")])]),e._v(" "),t("li",[t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import React, { PureComponent } from \'react\'\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: ""\n    }\n  }\n\n  render() {\n    const {username} = this.state;\n\n    return (\n      <div>\n        <form onSubmit={e => this.handleSubmit(e)}>\n          <label htmlFor="username">\n            用户名: \n            <input type="text" \n                   id="username" \n                   onChange={e => this.handleUsernameChange(e)} \n                   value={username}/>\n          </label>\n          <input type="submit" value="提交"/>\n        </form>\n      </div>\n    )\n  }\n\n  handleUsernameChange(event) {\n    this.setState({\n      username: event.target.value\n    })\n  }\n\n  handleSubmit(event) {\n    console.log(this.state.username);\n    event.preventDefault();\n  }\n}\n')])])])]),e._v(" "),t("li",[t("p",[e._v("由于在表单元素上设置了 "),t("code",[e._v("value")]),e._v(" 属性，因此显示的值将始终为 "),t("code",[e._v("this.state.value")]),e._v("，这使得 React 的 state 成为唯一数据源。")])]),e._v(" "),t("li",[t("p",[e._v("由于 "),t("code",[e._v("handleUsernameChange")]),e._v(" 在每次按键时都会执行并更新 React 的 state，因此显示的值将随着用户输入而更新。")])]),e._v(" "),t("li",[t("h3",{attrs:{id:"常见表单的处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见表单的处理"}},[e._v("#")]),e._v(" 常见表单的处理")])]),e._v(" "),t("li",[t("h4",{attrs:{id:"textarea标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#textarea标签"}},[e._v("#")]),e._v(" textarea标签")])]),e._v(" "),t("li",[t("p",[e._v("texteare标签和input比较相似：")])]),e._v(" "),t("li",[t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import React, { PureComponent } from \'react\'\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      article: "请编写你喜欢的文章"\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={e => this.handleSubmit(e)}>\n          <label htmlFor="article">\n            <textarea id="article" cols="30" rows="10"\n                      value={this.state.article}\n                      onChange={e => this.handleArticelChange(e)}/>\n          </label>\n          <div>\n            <input type="submit" value="发布文章"/>\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n  handleArticelChange(event) {\n    this.setState({\n      article: event.target.value\n    })\n  }\n\n  handleSubmit(event) {\n    console.log(this.state.article);\n    event.preventDefault();\n  }\n}\n')])])])]),e._v(" "),t("li",[t("h4",{attrs:{id:"select标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select标签"}},[e._v("#")]),e._v(" select标签")])]),e._v(" "),t("li",[t("p",[e._v("select标签的使用也非常简单，只是它不需要通过selected属性来控制哪一个被选中，它可以匹配state的value来选中。")])]),e._v(" "),t("li",[t("p",[e._v("我们来进行一个简单的演示：")])]),e._v(" "),t("li",[t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import React, { PureComponent } from \'react\'\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fruits: "orange"\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={e => this.handleSubmit(e)}>\n          <label htmlFor="fruits">\n            <select id="fruits" \n                    value={this.state.fruits}\n                    onChange={e => this.handleFruitsChange(e)}>\n              <option value="apple">苹果</option>\n              <option value="orange">橘子</option>\n              <option value="banana">香蕉</option>\n            </select>\n          </label>\n          <div>\n            <input type="submit" value="提交"/>\n          </div>\n        </form>\n      </div>\n    )\n  }\n\n  handleFruitsChange(event) {\n    this.setState({\n      fruits: event.target.value\n    })\n  }\n\n  handleSubmit(event) {\n    console.log(this.state.article);\n    event.preventDefault();\n  }\n}\n')])])])]),e._v(" "),t("li",[t("h4",{attrs:{id:"处理多个输入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理多个输入"}},[e._v("#")]),e._v(" 处理多个输入")])]),e._v(" "),t("li",[t("p",[e._v("多处理方式可以像单处理方式那样进行操作，但是需要多个监听方法：")])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("这里我们可以使用ES6的一个语法：计算属性名（Computed property names）")])])]),e._v(" "),t("li",[t("p",[e._v("进行对应的代码演练:")])]),e._v(" "),t("li",[t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import React, { PureComponent } from \'react\'\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: "",\n      password: ""\n    }\n  }\n\n  render() {\n    const {username, password} = this.state;\n\n    return (\n      <div>\n        <form onSubmit={e => this.handleSubmit(e)}>\n          <label htmlFor="username">\n            用户: \n            <input type="text" \n                   id="username" \n                   name="username"\n                   onChange={e => this.handleChange(e)} \n                   value={username}/>\n          </label>\n          <label htmlFor="password">\n            密码: \n            <input type="text" \n                   id="password" \n                   name="password"\n                   onChange={e => this.handleChange(e)} \n                   value={password}/>\n          </label>\n          <input type="submit" value="提交"/>\n        </form>\n      </div>\n    )\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit(event) {\n    console.log(this.state.username, this.state.password);\n    event.preventDefault();\n  }\n}\t\n')])])])])]),e._v(" "),t("h2",{attrs:{id:"非受控组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非受控组件"}},[e._v("#")]),e._v(" 非受控组件")]),e._v(" "),t("p",[e._v("React推荐大多数情况下使用 "),t("code",[e._v("受控组件")]),e._v(" 来处理表单数据：")]),e._v(" "),t("ul",[t("li",[e._v("一个受控组件中，表单数据是由 React 组件来管理的；")]),e._v(" "),t("li",[e._v("另一种替代方案是使用非受控组件，这时表单数据将交由 DOM 节点来处理；")])]),e._v(" "),t("p",[e._v("如果要使用非受控组件中的数据，那么我们需要使用 "),t("code",[e._v("ref")]),e._v(" 来从DOM节点中获取表单数据。")]),e._v(" "),t("p",[e._v("我们来进行一个简单的演练：")]),e._v(" "),t("ul",[t("li",[e._v("使用ref来获取input元素；")]),e._v(" "),t("li",[e._v("在非受控组件中通常使用defaultValue来设置默认值；")])]),e._v(" "),t("div",{staticClass:"language-react extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import React, { PureComponent, createRef } from \'react\'\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.usernameRef = createRef();\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={e => this.handleSubmit(e)}>\n          <label htmlFor="">\n            用户:<input defaultValue="username" type="text" name="username" ref={this.usernameRef}/>\n          </label>\n          <input type="submit" value="提交"/>\n        </form>\n      </div>\n    )\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(this.usernameRef.current.value);\n  }\n}\n')])])]),t("p",[e._v("同样，"),t("code",[e._v('<input type="checkbox">')]),e._v(" 和 "),t("code",[e._v('<input type="radio">')]),e._v(" 支持 "),t("code",[e._v("defaultChecked")]),e._v("，"),t("code",[e._v("<select>")]),e._v(" 和 "),t("code",[e._v("<textarea>")]),e._v(" 支持 "),t("code",[e._v("defaultValue")]),e._v("。")])])}),[],!1,null,null,null);t.default=r.exports}}]);