(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{409:function(t,n,e){"use strict";e.r(n);var a=e(1),s=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"react学习-七-setstate详解和react性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react学习-七-setstate详解和react性能优化"}},[t._v("#")]),t._v(" React学习（七）—— setState详解和React性能优化")]),t._v(" "),n("h2",{attrs:{id:"setstate的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setstate的使用"}},[t._v("#")]),t._v(" setState的使用")]),t._v(" "),n("h3",{attrs:{id:"为什么使用setstate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用setstate"}},[t._v("#")]),t._v(" 为什么使用setState")]),t._v(" "),n("p",[t._v("开发中我们并不能直接通过修改state的值来让界面发生更新，因为我们修改了"),n("code",[t._v("state")]),t._v("之后，希望React根据最新的"),n("code",[t._v("State")]),t._v("来重新渲染界面，但是这种方式的修改React并不知道数据发生了变化。我们必须通过"),n("code",[t._v("setState")]),t._v("来告知React数据已经发生了变化。")]),t._v(" "),n("p",[n("code",[t._v("setState")]),t._v("是从Component中继承过来的，在类组件中可以直接使用。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// react/src/ReactBaseclasses.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("setState")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("partialState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("invariant")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" partialState "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" partialState "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      partialState "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setState(...): takes an object of state variables to update or a '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function which returns an object of state variables.'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updater"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("enqueueSetState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" partialState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setState'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),n("h3",{attrs:{id:"setstate异步更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setstate异步更新"}},[t._v("#")]),t._v(" setState异步更新")]),t._v(" "),n("p",[t._v("setState是异步更新的。")]),t._v(" "),n("p",[t._v("下面的例子点击按钮修改"),n("code",[t._v("Hello World")]),t._v("为"),n("code",[t._v("Hello React")]),t._v("，页面中的文字虽然变化了，但是"),n("code",[t._v("changeText()")]),t._v("方法同步执行打印的文本内容仍是"),n("code",[t._v("Hello World")]),t._v("。")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B524.gif",alt:"558989"}})]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import React, { Component } from 'react'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: 'Hello World'\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>{this.state.message}</h2>\n        <button onClick={() => this.changeText()}>改变文本</button>\n      </div>\n    )\n  }\n\n  changeText() {\n    this.setState({\n      message: 'Hello React'\n    });\n\n    console.log(this.state.message);\n  }\n}\n")])])]),n("p",[t._v("为什么"),n("code",[t._v("setState")]),t._v("是异步更新呢？")]),t._v(" "),n("blockquote",[n("p",[t._v("https://github.com/facebook/react/issues/11527")])]),t._v(" "),n("ul",[n("li",[n("p",[n("code",[t._v("setState")]),t._v("设计成异步，可以显著的提升性能；")]),t._v(" "),n("ul",[n("li",[t._v("如果每次调用"),n("code",[t._v("setState")]),t._v("都进行一次更新，那么意味着"),n("code",[t._v("render")]),t._v("函数会被频繁调用，界面重新渲染，这样效率是很低的；")]),t._v(" "),n("li",[t._v("好的办法应该是获取到多个更新，之后进行批量更新；")])])]),t._v(" "),n("li",[n("p",[t._v("如果同步更新了"),n("code",[t._v("state")]),t._v("，但是还没执行到"),n("code",[t._v("render")]),t._v("函数，那么"),n("code",[t._v("state")]),t._v("和"),n("code",[t._v("props")]),t._v("不能保持同步；")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("state")]),t._v("和"),n("code",[t._v("props")]),t._v("不能保持一致性，会在开发中产生很多的问题；如父组件和子组件的数据不同步，子组件中接受的props是旧的数据。")])]),t._v(" "),n("p",[t._v("那么如何可以获取到更新后的值呢？")]),t._v(" "),n("ul",[n("li",[t._v("setState接受两个参数：第二个参数是一个回调函数，这个回调函数会在更新后会执行；")]),t._v(" "),n("li",[t._v("格式如下：setState(partialState, callback)")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('changeText() {\n  this.setState({\n    message: "你好啊,李银河"\n  }, () => {\n    console.log(this.state.message); // 你好啊,李银河\n  });\n}\n')])])]),n("p",[t._v("当然，我们也可以在生命周期函数中获取更新后的数据：")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("componentDidUpdate(prevProps, provState, snapshot) {\n  console.log(this.state.message);\n}\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"setstate一定是异步吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setstate一定是异步吗"}},[t._v("#")]),t._v(" setState一定是异步吗")]),t._v(" "),n("p",[t._v("疑惑：setState一定是异步更新的吗？")]),t._v(" "),n("p",[t._v("验证一：在setTimeout中的更新：")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('changeText() {\n  setTimeout(() => {\n    this.setState({\n      message: "你好啊,李银河"\n    });\n    console.log(this.state.message); // 你好啊,李银河\n  }, 0);\n}\n')])])]),n("p",[t._v("验证二：原生DOM事件：")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('componentDidMount() {\n  const btnEl = document.getElementById("btn");\n  btnEl.addEventListener(\'click\', () => {\n    this.setState({\n      message: "你好啊,李银河"\n    });\n    console.log(this.state.message); // 你好啊,李银河\n  })\n}\n')])])]),n("p",[t._v("其实分成两种情况：")]),t._v(" "),n("ul",[n("li",[t._v("在组件生命周期或React合成事件中，setState是异步；")]),t._v(" "),n("li",[t._v("在setTimeout或者原生dom事件中，setState是同步；")])]),t._v(" "),n("p",[t._v("为什么React会使用合成事件对象？")]),t._v(" "),n("p",[t._v("React不止运行在浏览器，还可能运行在手机端（React-Native）。如果运行在浏览器中，那么此时就会把浏览器原生DOM对象和一些其他属性合成到合成事件对象中；如果在手机上，就会使用手机端原生控件对象。到底要使用哪个对象，React在最初始化时是不知道的，会根据环境来判断。")]),t._v(" "),n("p",[t._v("React中其实是通过一个函数来确定的：enqueueSetState部分实现（\nreact-reconciler/ReactFiberClassComponent.js）")]),t._v(" "),n("p",[t._v("每个组件对象都有一个updater对象")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const currentTime = requestCurrentTimeForUpdate();\n    const suspenseConfig = requestCurrentSuspenseConfig();\n    const expirationTime = computeExpirationForFiber(\n      currentTime,\n      fiber,\n      suspenseConfig,\n    );\n\n    const update = createUpdate(expirationTime, suspenseConfig);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleWork(fiber, expirationTime);\n  },\n")])])]),n("p",[n("code",[t._v("computeExpirationForFiber")]),t._v("会决定此次的更新是同步还是批量异步，位置在"),n("code",[t._v("packages\\react-reconciler\\src\\ReactFiberWorkLoop.js")]),t._v("。")]),t._v(" "),n("p",[n("code",[t._v("createUpdate")]),t._v("会创建一个更新对象，然后"),n("code",[t._v("enqueueUpdate")]),t._v("会生成链表，"),n("code",[t._v("scheduleWork")]),t._v("安排执行相关任务。")]),t._v(" "),n("p",[n("code",[t._v("enqueueUpdate")]),t._v("生成链表源码如下：")]),t._v(" "),n("p",[n("code",[t._v("packages\\react-reconciler\\src\\ReactUpdateQueue.js")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export function enqueueUpdate<State>(fiber: Fiber, update: Update<State>) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue = updateQueue.shared;\n  const pending = sharedQueue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  sharedQueue.pending = update;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\n")])])]),n("h3",{attrs:{id:"setstate的数据合并"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setstate的数据合并"}},[t._v("#")]),t._v(" setState的数据合并")]),t._v(" "),n("p",[t._v("比如我们还是有一个counter属性，记录当前的数字：")]),t._v(" "),n("ul",[n("li",[t._v("如果进行如下操作，那么counter会变成几呢？答案是1；")]),t._v(" "),n("li",[t._v("为什么呢？因为它会对多个state进行合并；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("  increment() {\n    this.setState({\n      counter: this.state.counter + 1\n    });\n\n    this.setState({\n      counter: this.state.counter + 1\n    });\n\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  }\n")])])]),n("p",[t._v("在源码中，有一个do-while循环会对update队列进行处理，内部对多个state进行了合并。")]),t._v(" "),n("p",[t._v("如何可以做到，让counter最终变成3呢？")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("increment() {\n  this.setState((state, props) => {\n    return {\n      counter: state.counter + 1\n    }\n  })\n\n  this.setState((state, props) => {\n    return {\n      counter: state.counter + 1\n    }\n  })\n\n  this.setState((state, props) => {\n    return {\n      counter: state.counter + 1\n    }\n  })\n  }\n")])])]),n("p",[t._v("为什么传入一个函数就可以变出3呢？")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("原因是多个state进行合并时，每次遍历，都会执行一次函数：")]),t._v(" "),n("p",[n("code",[t._v("partialState = payload.call(instance, prevState, nextProps);")])])])]),t._v(" "),n("p",[t._v("packages\\react-reconciler\\src\\ReactUpdateQueue.js")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderExpirationTime: ExpirationTime,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = queue.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      let baseFirst = baseQueue.next;\n      let pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n\n    baseQueue = pendingQueue;\n\n    queue.shared.pending = null;\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      const currentQueue = current.updateQueue;\n      if (currentQueue !== null) {\n        currentQueue.baseQueue = pendingQueue;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (baseQueue !== null) {\n    let first = baseQueue.next;\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    let newExpirationTime = NoWork;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n\n    if (first !== null) {\n      let update = first;\n      do {\n        const updateExpirationTime = update.expirationTime;\n        if (updateExpirationTime < renderExpirationTime) {\n          // Priority is insufficient. Skip this update. If this is the first\n          // skipped update, the previous update/state is the new base\n          // update/state.\n          const clone: Update<State> = {\n            expirationTime: update.expirationTime,\n            suspenseConfig: update.suspenseConfig,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: (null: any),\n          };\n          if (newBaseQueueLast === null) {\n            newBaseQueueFirst = newBaseQueueLast = clone;\n            newBaseState = newState;\n          } else {\n            newBaseQueueLast = newBaseQueueLast.next = clone;\n          }\n          // Update the remaining priority in the queue.\n          if (updateExpirationTime > newExpirationTime) {\n            newExpirationTime = updateExpirationTime;\n          }\n        } else {\n          // This update does have sufficient priority.\n\n          if (newBaseQueueLast !== null) {\n            const clone: Update<State> = {\n              expirationTime: Sync, // This update is going to be committed so we never want uncommit it.\n              suspenseConfig: update.suspenseConfig,\n\n              tag: update.tag,\n              payload: update.payload,\n              callback: update.callback,\n\n              next: (null: any),\n            };\n            newBaseQueueLast = newBaseQueueLast.next = clone;\n          }\n\n          // Mark the event time of this update as relevant to this render pass.\n          // TODO: This should ideally use the true event time of this update rather than\n          // its priority which is a derived and not reverseable value.\n          // TODO: We should skip this update if it was already committed but currently\n          // we have no way of detecting the difference between a committed and suspended\n          // update here.\n          markRenderEventTimeAndConfig(\n            updateExpirationTime,\n            update.suspenseConfig,\n          );\n\n          // Process this update.\n          newState = getStateFromUpdate(\n            workInProgress,\n            queue,\n            update,\n            newState,\n            props,\n            instance,\n          );\n          const callback = update.callback;\n          if (callback !== null) {\n            workInProgress.effectTag |= Callback;\n            let effects = queue.effects;\n            if (effects === null) {\n              queue.effects = [update];\n            } else {\n              effects.push(update);\n            }\n          }\n        }\n        update = update.next;\n        if (update === null || update === first) {\n          pendingQueue = queue.shared.pending;\n          if (pendingQueue === null) {\n            break;\n          } else {\n            // An update was scheduled from inside a reducer. Add the new\n            // pending updates to the end of the list and keep processing.\n            update = baseQueue.next = pendingQueue.next;\n            pendingQueue.next = first;\n            queue.baseQueue = baseQueue = pendingQueue;\n            queue.shared.pending = null;\n          }\n        }\n      } while (true);\n    }\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.baseQueue = newBaseQueueLast;\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markUnprocessedUpdateTime(newExpirationTime);\n    workInProgress.expirationTime = newExpirationTime;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n")])])]),n("p",[t._v("getStateFromUpdate获取新的state")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n   ...\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictMode\n          ) {\n            payload.call(instance, prevState, nextProps);\n          }\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return Object.assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n")])])]),n("p",[t._v("最后，如果需要，会合并对象"),n("code",[t._v("return Object.assign({}, prevState, partialState);")])]),t._v(" "),n("h2",{attrs:{id:"react性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react性能优化"}},[t._v("#")]),t._v(" React性能优化")]),t._v(" "),n("p",[t._v("我们知道React的渲染流程：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B525.png",alt:"image-20210622114027542"}})]),t._v(" "),n("p",[t._v("React的更新流程是：")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B526.png",alt:"image-20210622114110703"}})]),t._v(" "),n("p",[t._v("React在props或state发生改变时，会调用React的render方法，会创建一颗不同的树。")]),t._v(" "),n("p",[t._v("React需要基于这两颗不同的树之间的差别来判断如何有效的更新UI：")]),t._v(" "),n("ul",[n("li",[t._v("如果一棵树参考另外一棵树进行完全比较更新，那么即使是最先进的算法，该算法的复杂程度为 O(n 3 )，其中 n 是树中元素的数量；")]),t._v(" "),n("li",[t._v("https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf；")]),t._v(" "),n("li",[t._v("如果在 React 中使用了该算法，那么展示 1000 个元素所需要执行的计算量将在十亿的量级范围；")]),t._v(" "),n("li",[t._v("这个开销太过昂贵了，React的更新性能会变得非常低效；")])]),t._v(" "),n("p",[t._v("于是，React对这个算法进行了优化，将其优化成了O(n)，如何优化的呢？")]),t._v(" "),n("ul",[n("li",[t._v("同层节点之间相互比较，不会垮节点比较；")]),t._v(" "),n("li",[t._v("不同类型的节点，产生不同的树结构；")]),t._v(" "),n("li",[t._v("开发中，可以通过key来指定哪些节点在不同的渲染下保持稳定；")])]),t._v(" "),n("h3",{attrs:{id:"diffing算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#diffing算法"}},[t._v("#")]),t._v(" Diffing算法")]),t._v(" "),n("h4",{attrs:{id:"对比不同类型的元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对比不同类型的元素"}},[t._v("#")]),t._v(" 对比不同类型的元素")]),t._v(" "),n("p",[t._v("当节点为不同的元素，React会拆卸原有的树，并且建立起新的树：")]),t._v(" "),n("ul",[n("li",[t._v("当一个元素从 "),n("code",[t._v("<a>")]),t._v(" 变成 "),n("code",[t._v("<img>")]),t._v("，从 "),n("code",[t._v("<Article>")]),t._v(" 变成 "),n("code",[t._v("<Comment>")]),t._v("，或从 "),n("code",[t._v("<Button>")]),t._v(" 变成 "),n("code",[t._v("<div>")]),t._v(" 都会触发一个完整的重建流程；")]),t._v(" "),n("li",[t._v("当卸载一棵树时，对应的DOM节点也会被销毁，组件实例将执行 "),n("code",[t._v("componentWillUnmount()")]),t._v(" 方法；")]),t._v(" "),n("li",[t._v("当建立一棵新的树时，对应的 DOM 节点会被创建以及插入到 DOM 中，组件实例将执行 "),n("code",[t._v("componentWillMount()")]),t._v(" 方法，紧接着 "),n("code",[t._v("componentDidMount()")]),t._v(" 方法；")])]),t._v(" "),n("p",[t._v("比如下面的代码更改：")]),t._v(" "),n("ul",[n("li",[t._v("React 会销毁 "),n("code",[t._v("Counter")]),t._v(" 组件并且重新装载一个新的组件，而不会对Counter进行复用；")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<div>\n  <Counter />\n</div>\n\n<span>\n  <Counter />\n</span>\n")])])]),n("h4",{attrs:{id:"对比同一类型的元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对比同一类型的元素"}},[t._v("#")]),t._v(" 对比同一类型的元素")]),t._v(" "),n("p",[t._v("当比对两个相同类型的 React 元素时，React 会保留 DOM 节点，仅比对及更新有改变的属性。")]),t._v(" "),n("p",[t._v("比如下面的代码更改：")]),t._v(" "),n("ul",[n("li",[t._v("通过比对这两个元素，React 知道只需要修改 DOM 元素上的 "),n("code",[t._v("className")]),t._v(" 属性；")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<div className="before" title="stuff" />\n\n<div className="after" title="stuff" />\n')])])]),n("p",[t._v("比如下面的代码更改：")]),t._v(" "),n("ul",[n("li",[t._v("当更新 "),n("code",[t._v("style")]),t._v(" 属性时，React 仅更新有所更变的属性。")]),t._v(" "),n("li",[t._v("通过比对这两个元素，React 知道只需要修改 DOM 元素上的 "),n("code",[t._v("color")]),t._v(" 样式，无需修改 "),n("code",[t._v("fontWeight")]),t._v("。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<div style={{color: 'red', fontWeight: 'bold'}} />\n\n<div style={{color: 'green', fontWeight: 'bold'}} />\n")])])]),n("p",[t._v("如果是同类型的组件元素：")]),t._v(" "),n("ul",[n("li",[t._v("组件会保持不变，React会更新该组件的props，并且调用"),n("code",[t._v("componentWillReceiveProps()")]),t._v(" 和 "),n("code",[t._v("componentWillUpdate()")]),t._v(" 方法；")]),t._v(" "),n("li",[t._v("下一步，调用 "),n("code",[t._v("render()")]),t._v(" 方法，diff 算法将在之前的结果以及新的结果中进行递归；")])]),t._v(" "),n("h4",{attrs:{id:"对子节点进行递归"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对子节点进行递归"}},[t._v("#")]),t._v(" 对子节点进行递归")]),t._v(" "),n("p",[t._v("在默认条件下，当递归 DOM 节点的子元素时，React 会同时遍历两个子元素的列表；当产生差异时，生成一个 mutation。")]),t._v(" "),n("p",[t._v("我们来看一下在最后插入一条数据的情况：")]),t._v(" "),n("ul",[n("li",[t._v("前面两个比较是完全相同的，所以不会产生mutation；")]),t._v(" "),n("li",[t._v("最后一个比较，产生一个mutation，将其插入到新的DOM树中即可；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n\n<ul>\n  <li>first</li>\n  <li>second</li>\n  <li>third</li>\n</ul>\n")])])]),n("p",[t._v("但是如果我们是在中间插入一条数据：")]),t._v(" "),n("ul",[n("li",[t._v("React会对每一个子元素产生一个mutation，而不是保持 "),n("code",[t._v("<li>星际穿越</li>")]),t._v("和"),n("code",[t._v("<li>盗梦空间</li>")]),t._v("的不变；")]),t._v(" "),n("li",[t._v("这种低效的比较方式会带来一定的性能问题；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<ul>\n  <li>星际穿越</li>\n  <li>盗梦空间</li>\n</ul>\n\n<ul>\n  <li>大话西游</li>\n  <li>星际穿越</li>\n  <li>盗梦空间</li>\n</ul>\n")])])]),n("h3",{attrs:{id:"keys的优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#keys的优化"}},[t._v("#")]),t._v(" keys的优化")]),t._v(" "),n("p",[t._v("我们在前面遍历列表时，总是会提示一个警告，让我们加入一个key属性：")]),t._v(" "),n("p",[t._v("我们来看一个案例：")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React, { Component } from \'react\'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movies: ["星际穿越", "盗梦空间"]\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>电影列表</h2>\n        <ul>\n          {\n            this.state.movies.map((item, index) => {\n              return <li>{item}</li>\n            })\n          }\n        </ul>\n        <button onClick={e => this.insertMovie()}>插入数据</button>\n      </div>\n    )\n  }\n\n  insertMovie() {\n  }\n}\n')])])]),n("p",[t._v("方式一：在最后位置插入数据")]),t._v(" "),n("ul",[n("li",[t._v("这种情况，有无key意义并不大")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('insertMovie() {\n  const newMovies = [...this.state.movies, "大话西游"];\n  this.setState({\n    movies: newMovies\n  })\n}\n')])])]),n("p",[t._v("方式二：在前面插入数据")]),t._v(" "),n("ul",[n("li",[t._v("这种做法，在没有key的情况下，所有的li都需要进行修改；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('insertMovie() {\n  const newMovies = ["大话西游", ...this.state.movies];\n  this.setState({\n    movies: newMovies\n  })\n}\n')])])]),n("p",[t._v("当子元素(这里的li)拥有 key 时，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素：")]),t._v(" "),n("ul",[n("li",[t._v("在下面这种场景下，key为111和222的元素仅仅进行位移，不需要进行任何的修改；")]),t._v(" "),n("li",[t._v("将key为333的元素插入到最前面的位置即可；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<ul>\n  <li key="111">星际穿越</li>\n  <li key="222">盗梦空间</li>\n</ul>\n\n<ul>\n  <li key="333">Connecticut</li>\n  <li key="111">星际穿越</li>\n  <li key="222">盗梦空间</li>\n</ul>\n')])])]),n("p",[t._v("key的注意事项：")]),t._v(" "),n("ul",[n("li",[t._v("key应该是唯一的；")]),t._v(" "),n("li",[t._v("key不要使用随机数（随机数在下一次render时，会重新生成一个数字）；")]),t._v(" "),n("li",[t._v("使用index作为key，对性能是没有优化的；")])]),t._v(" "),n("h3",{attrs:{id:"scu的优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scu的优化"}},[t._v("#")]),t._v(" SCU的优化")]),t._v(" "),n("h4",{attrs:{id:"render函数被调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#render函数被调用"}},[t._v("#")]),t._v(" render函数被调用")]),t._v(" "),n("p",[t._v("我们使用之前的一个嵌套案例：")]),t._v(" "),n("ul",[n("li",[t._v("在App中，我们增加了一个计数器的代码；")]),t._v(" "),n("li",[t._v("当点击+1时，会重新调用App的render函数；")]),t._v(" "),n("li",[t._v("而当App的render函数被调用时，所有的子组件的render函数都会被重新调用；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React, { Component } from \'react\';\n\nfunction Header() {\n  console.log("Header Render 被调用");\n  return <h2>Header</h2>\n}\n\nclass Main extends Component {\n  render() {\n    console.log("Main Render 被调用");\n    return (\n      <div>\n        <Banner/>\n        <ProductList/>\n      </div>\n    )\n  }\n}\n\nfunction Banner() {\n  console.log("Banner Render 被调用");\n  return <div>Banner</div>\n}\n\nfunction ProductList() {\n  console.log("ProductList Render 被调用");\n  return (\n    <ul>\n      <li>商品1</li>\n      <li>商品2</li>\n      <li>商品3</li>\n      <li>商品4</li>\n      <li>商品5</li>\n    </ul>\n  )\n}\n\nfunction Footer() {\n  console.log("Footer Render 被调用");\n  return <h2>Footer</h2>\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0\n    }\n  }\n\n  render() {\n    console.log("App Render 被调用");\n\n    return (\n      <div>\n        <h2>当前计数: {this.state.counter}</h2>\n        <button onClick={e => this.increment()}>+1</button>\n        <Header/>\n        <Main/>\n        <Footer/>\n      </div>\n    )\n  }\n\n  increment() {\n    this.setState({\n      counter: this.state.counter + 1\n    })\n  }\n}\n')])])]),n("p",[n("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B527.png",alt:"image-20210622173604563"}})]),t._v(" "),n("p",[t._v("那么，我们可以思考一下，在以后的开发中，我们只要是修改了App中的数据，所有的组件都需要重新render，进行diff算法，性能必然是很低的：")]),t._v(" "),n("ul",[n("li",[t._v("事实上，很多的组件没有必须要重新render；")]),t._v(" "),n("li",[t._v("它们调用render应该有一个前提，就是依赖的数据（state、props）发生改变时，再调用自己的render方法；")])]),t._v(" "),n("p",[t._v("如何来控制render方法是否被调用呢？")]),t._v(" "),n("ul",[n("li",[t._v("通过"),n("code",[t._v("shouldComponentUpdate")]),t._v("方法即可；")])]),t._v(" "),n("h4",{attrs:{id:"shouldcomponentupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shouldcomponentupdate"}},[t._v("#")]),t._v(" shouldComponentUpdate")]),t._v(" "),n("p",[t._v("React给我们提供了一个生命周期方法 "),n("code",[t._v("shouldComponentUpdate")]),t._v("（很多时候，我们简称为SCU），这个方法接受参数，并且需要有返回值：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("该方法有两个参数：")])]),t._v(" "),n("li",[n("ul",[n("li",[t._v("参数一：nextProps 修改之后，最新的props属性")]),t._v(" "),n("li",[t._v("参数二：nextState 修改之后，最新的state属性")])])]),t._v(" "),n("li",[n("p",[t._v("该方法返回值是一个boolean类型")])]),t._v(" "),n("li",[n("ul",[n("li",[t._v("返回值为true，那么就需要调用render方法；")]),t._v(" "),n("li",[t._v("返回值为false，那么久不需要调用render方法；")]),t._v(" "),n("li",[t._v("默认返回的是true，也就是只要state发生改变，就会调用render方法；")])])])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("shouldComponentUpdate(nextProps, nextState) {\n  return true;\n}\n")])])]),n("p",[t._v("我们可以控制它返回的内容，来决定是否需要重新渲染。")]),t._v(" "),n("p",[t._v("比如我们在App中增加一个message属性：")]),t._v(" "),n("ul",[n("li",[t._v("jsx中并没有依赖这个message，那么它的改变不应该引起重新渲染；")]),t._v(" "),n("li",[t._v("但是因为render监听到state的改变，就会重新render，所以最后render方法还是被重新调用了；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React, { Component } from \'react\';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      message: "Hello World"\n    }\n  }\n\n  render() {\n    console.log("App Render 被调用");\n\n    return (\n      <div>\n        <h2>当前计数: {this.state.counter}</h2>\n        <button onClick={e => this.increment()}>+1</button>\n        <button onClick={e => this.changeText()}>改变文本</button>\n      </div>\n    )\n  }\n\n  increment() {\n    this.setState({\n      counter: this.state.counter + 1\n    })\n  }\n\n  changeText() {\n    this.setState({\n      message: "你好啊,李银河"\n    })\n  }\n}\n')])])]),n("p",[t._v("这个时候，我们可以通过实现shouldComponentUpdate来决定要不要重新调用render方法：")]),t._v(" "),n("ul",[n("li",[t._v("这个时候，我们改变counter时，会重新渲染；")]),t._v(" "),n("li",[t._v("如果，我们改变的是message，那么默认返回的是false，那么就不会重新渲染；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("shouldComponentUpdate(nextProps, nextState) {\n  if (nextState.counter !== this.state.counter) {\n    return true;\n  }\n\n  return false;\n}\n")])])]),n("p",[t._v("但是我们的代码依然没有优化到最好，因为当counter改变时，所有的子组件依然重新渲染了：")]),t._v(" "),n("ul",[n("li",[t._v("所以，事实上，我们应该实现所有的子组件的shouldComponentUpdate；")])]),t._v(" "),n("p",[t._v("比如Main组件，可以进行如下实现：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("shouldComponentUpdate")]),t._v("默认返回一个false；")]),t._v(" "),n("li",[t._v("在特定情况下，需要更新时，我们在上面添加对应的条件即可；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class Main extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    console.log("Main Render 被调用");\n    return (\n      <div>\n        <Banner/>\n        <ProductList/>\n      </div>\n    )\n  }\n}\n')])])]),n("h4",{attrs:{id:"purecomponent和memo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#purecomponent和memo"}},[t._v("#")]),t._v(" PureComponent和memo")]),t._v(" "),n("p",[t._v("如果所有的类，我们都需要手动来实现 shouldComponentUpdate，那么会给我们开发者增加非常多的工作量。")]),t._v(" "),n("p",[t._v("我们来设想一下shouldComponentUpdate中的各种判断的目的是什么？")]),t._v(" "),n("ul",[n("li",[t._v("props或者state中的数据是否发生了改变，来决定shouldComponentUpdate返回true或者false；")])]),t._v(" "),n("p",[t._v("事实上React已经考虑到了这一点，所以React已经默认帮我们实现好了，如何实现呢？")]),t._v(" "),n("ul",[n("li",[t._v("将class基础自PureComponent。")])]),t._v(" "),n("p",[t._v("比如我们修改Main组件的代码：")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class Main extends PureComponent {\n  render() {\n    console.log("Main Render 被调用");\n    return (\n      <div>\n        <Banner/>\n        <ProductList/>\n      </div>\n    )\n  }\n}\n')])])]),n("p",[t._v("完整代码如下：")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React, { Component, PureComponent } from \'react\';\n\nfunction Header() {\n  console.log("Header Render 被调用");\n  return <h2>Header</h2>\n}\n\nclass Main extends PureComponent {\n  render() {\n    console.log("Main Render 被调用");\n    return (\n      <div>\n        <Banner/>\n        <ProductList/>\n      </div>\n    )\n  }\n}\n\nclass Banner extends PureComponent {\n  render() {\n    console.log("Banner Render 被调用");\n    return <div>Banner</div>\n  }\n}\n\n\nfunction ProductList() {\n  console.log("ProductList Render 被调用");\n  return (\n    <ul>\n      <li>商品1</li>\n      <li>商品2</li>\n      <li>商品3</li>\n      <li>商品4</li>\n      <li>商品5</li>\n    </ul>\n  )\n}\n\nfunction Footer() {\n  console.log("Footer Render 被调用");\n  return <h2>Footer</h2>\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0\n    }\n  }\n\n  render() {\n    console.log("App Render 被调用");\n\n    return (\n      <div>\n        <h2>当前计数: {this.state.counter}</h2>\n        <button onClick={e => this.increment()}>+1</button>\n        <Header/>\n        <Main/>\n        <Footer/>\n      </div>\n    )\n  }\n\n  increment() {\n    this.setState({\n      counter: this.state.counter + 1\n    })\n  }\n}\n')])])]),n("p",[t._v("PureComponent的原理是什么呢？")]),t._v(" "),n("ul",[n("li",[t._v("对props和state进行浅层比较；")])]),t._v(" "),n("p",[t._v("源码中有一个方法"),n("code",[t._v("checkShouldComponentUpdate")]),t._v("会校验我们实例中的"),n("code",[t._v("render")]),t._v("是否需要调用。")]),t._v(" "),n("p",[n("code",[t._v("\\packages\\react-reconciler\\src\\ReactFiberClassComponent.js")])]),t._v(" "),n("ul",[n("li",[t._v("如果实例中有"),n("code",[t._v("shouldComponentUpdate")]),t._v("方法，那么会调用此方法，并根据此方法的返回布尔值决定是否重新"),n("code",[t._v("render")])]),t._v(" "),n("li",[t._v("如果实例继承的是"),n("code",[t._v("PureComponent")]),t._v("，就会进行浅层比较，决定是否重新render")]),t._v(" "),n("li",[t._v("默认这个方法会返回"),n("code",[t._v("true")])])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkShouldComponentUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  ctor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  oldProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  newProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  oldState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  newState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  nextContext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldComponentUpdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DEV__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        debugRenderPhaseSideEffectsForStrictMode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n        workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" StrictMode\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Invoke the function an extra time to help detect side-effects.")]),t._v("\n        instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldComponentUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextContext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("startPhaseTimer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'shouldComponentUpdate'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" shouldUpdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldComponentUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      newProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      newState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      nextContext"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stopPhaseTimer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DEV__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shouldUpdate "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%s.shouldComponentUpdate(): Returned undefined instead of a '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'boolean value. Make sure to return true or false.'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getComponentName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Component'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" shouldUpdate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ctor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isPureReactComponent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shallowEqual")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shallowEqual")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("oldState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("在"),n("code",[t._v("packages\\react\\src\\ReactBaseClasses.js")]),t._v("中：")]),t._v(" "),n("ul",[n("li",[t._v("有一个属性是"),n("code",[t._v("pureComponentPrototype.isPureReactComponent = true;")]),t._v("定义是否是"),n("code",[t._v("PureComponent")]),t._v("；")]),t._v(" "),n("li",[t._v("那么上面的"),n("code",[t._v("checkShouldComponentUpdate")]),t._v("就可以根据这个属性判断执行了")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Convenience component with default shallow equality check for sCU.\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("PureComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" updater")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If a component has string refs, we will assign a different object later.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("refs "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" emptyObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updater "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" updater "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" ReactNoopUpdateQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" pureComponentPrototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PureComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ComponentDummy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npureComponentPrototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" PureComponent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Avoid an extra prototype jump for these methods.")]),t._v("\nObject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pureComponentPrototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npureComponentPrototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isPureReactComponent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("strong",[t._v("那么，如果是一个函数式组件呢？")])]),t._v(" "),n("p",[t._v("我们需要使用一个高阶组件memo：")]),t._v(" "),n("ul",[n("li",[t._v("我们将之前的Header、Banner、ProductList都通过memo函数进行一层包裹；")]),t._v(" "),n("li",[t._v("Footer没有使用memo函数进行包裹；")]),t._v(" "),n("li",[t._v("最终的效果是，当counter发生改变时，Header、Banner、ProductList的函数不会重新执行，而Footer的函数会被重新执行；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React, { Component, PureComponent, memo } from \'react\';\n\nconst MemoHeader = memo(function Header() {\n  console.log("Header Render 被调用");\n  return <h2>Header</h2>\n})\n\n\nclass Main extends PureComponent {\n  render() {\n    console.log("Main Render 被调用");\n    return (\n      <div>\n        <Banner/>\n        <ProductList/>\n      </div>\n    )\n  }\n}\n\nclass Banner extends PureComponent {\n  render() {\n    console.log("Banner Render 被调用");\n    return <div>Banner</div>\n  }\n}\n\n\nfunction ProductList() {\n  console.log("ProductList Render 被调用");\n  return (\n    <ul>\n      <li>商品1</li>\n      <li>商品2</li>\n      <li>商品3</li>\n      <li>商品4</li>\n      <li>商品5</li>\n    </ul>\n  )\n}\n\nfunction Footer() {\n  console.log("Footer Render 被调用");\n  return <h2>Footer</h2>\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0\n    }\n  }\n\n  render() {\n    console.log("App Render 被调用");\n\n    return (\n      <div>\n        <h2>当前计数: {this.state.counter}</h2>\n        <button onClick={e => this.increment()}>+1</button>\n        <MemoHeader/>\n        <Main/>\n        <Footer/>\n      </div>\n    )\n  }\n\n  increment() {\n    this.setState({\n      counter: this.state.counter + 1\n    })\n  }\n}\n')])])]),n("p",[t._v("memo在"),n("code",[t._v("\\packages\\react\\src\\memo.js")]),t._v("文件中，返回了一个对象，这个对象中有一个compare函数。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" memo"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Props"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" React$ElementType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  compare"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("oldProps")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("newProps")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Props")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" boolean"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DEV__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isValidElementType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'memo: The first argument must be a component. Instead '")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'received: %s'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'null'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    $$"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("REACT_MEMO_TYPE")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("compare")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" compare "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" compare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("具体的比较在"),n("code",[t._v("packages\\react-reconciler\\src\\ReactFiberBeginWork.js")]),t._v("中")]),t._v(" "),n("ul",[n("li",[t._v("如果自己在memo中传入了compare函数，就是用传入的，否则使用"),n("code",[t._v("shallowEqual")]),t._v("浅比较。")]),t._v(" "),n("li",[t._v("所以memo的本质上做了一个浅比较")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateMemoComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token parameter"}},[n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("current")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("workInProgress")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("Component")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("nextProps")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  updateExpirationTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("renderExpirationTime")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ExpirationTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Fiber "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSimpleFunctionComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n      Component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compare "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SimpleMemoComponent codepath doesn't resolve outer props either.")]),t._v("\n      Component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaultProps "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" resolvedType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DEV__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        resolvedType "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolveFunctionForHotReloading")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If this is a plain function component without default props,")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and with only the default shallow comparison, we upgrade it")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// to a SimpleMemoComponent to allow fast path updates.")]),t._v("\n      workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SimpleMemoComponent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" resolvedType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DEV__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("validateFunctionComponentInDev")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateSimpleMemoComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        resolvedType"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        updateExpirationTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        renderExpirationTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DEV__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" innerPropTypes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propTypes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("innerPropTypes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Inner memo component props aren't currently validated in createElement.")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We could move it there, but we'd still need this for lazy code path.")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkPropTypes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          innerPropTypes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Resolved props")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prop'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getComponentName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          getCurrentFiberStackInDev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" child "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createFiberFromTypeAndProps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      Component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      renderExpirationTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" child"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DEV__"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" innerPropTypes "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propTypes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("innerPropTypes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Inner memo component props aren't currently validated in createElement.")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We could move it there, but we'd still need this for lazy code path.")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkPropTypes")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        innerPropTypes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Resolved props")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'prop'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getComponentName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        getCurrentFiberStackInDev"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentChild "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" any"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Fiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is always exactly one child")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("updateExpirationTime "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" renderExpirationTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This will be the props with resolved defaultProps,")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// unlike current.memoizedProps which will be the unresolved ones.")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevProps "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentChild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Default to shallow comparison")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" compare "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Component"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compare"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    compare "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" compare "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" compare "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" shallowEqual"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("compare")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("bailoutOnAlreadyFinishedWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        renderExpirationTime"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// React DevTools reads this flag.")]),t._v("\n  workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" PerformedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newChild "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createWorkInProgress")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentChild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  newChild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  newChild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newChild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newChild"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h4",{attrs:{id:"不可变数据的力量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不可变数据的力量"}},[t._v("#")]),t._v(" 不可变数据的力量")]),t._v(" "),n("p",[t._v("我们通过一个案例来演练我们之前说的不可变数据的重要性：")]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import React, { PureComponent } from \'react\'\n\nexport default class App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      friends: [\n        { name: "lilei", age: 20, height: 1.76 },\n        { name: "lucy", age: 18, height: 1.65 },\n        { name: "tom", age: 30, height: 1.78 }\n      ]\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>朋友列表</h2>\n        <ul>\n          {\n            this.state.friends.map((item, index) => {\n              return (\n                <li key={item.name}>\n                  <span>{`姓名:${item.name} 年龄: ${item.age}`}</span>\n                  <button onClick={e => this.incrementAge(index)}>年龄+1</button>\n                </li>\n              )\n            })\n          }\n        </ul>\n        <button onClick={e => this.insertFriend()}>添加新数据</button>\n      </div>\n    )\n  }\n\n  insertFriend() {\n     \n  }\n\n  incrementAge(index) {\n    \n  }\n}\n')])])]),n("p",[n("strong",[t._v("我们来思考一下inertFriend应该如何实现？")])]),t._v(" "),n("p",[t._v("实现方式一：")]),t._v(" "),n("ul",[n("li",[t._v("这种方式会造成界面不会发生刷新，添加新的数据；")]),t._v(" "),n("li",[t._v("原因是继承自PureComponent，会进行浅层比较，浅层比较过程中两个friends是相同的对象；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('insertFriend() {\n  this.state.friends.push({name: "why", age: 18, height: 1.88});\n  this.setState({\n    friends: this.state.friends\n  })\n}\n')])])]),n("p",[t._v("实现方式二：")]),t._v(" "),n("ul",[n("li",[n("code",[t._v('[...this.state.friends, {name: "why", age: 18, height: 1.88}]')]),t._v("会生成一个新的数组引用；")]),t._v(" "),n("li",[t._v("在进行浅层比较时，两个引用的是不同的数组，所以它们是不相同的；")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('insertFriend() {\n  this.setState({\n    friends: [...this.state.friends, {name: "why", age: 18, height: 1.88}]\n  })\n}\n')])])]),n("p",[n("strong",[t._v("我们再来思考一下incrementAge应该如何实现？")])]),t._v(" "),n("p",[t._v("实现方式一：")]),t._v(" "),n("ul",[n("li",[t._v("和上面方式一类似")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("incrementAge(index) {\n  this.state.friends[index].age += 1;\n  this.setState({\n    friends: this.state.friends\n  })\n}\n")])])]),n("p",[t._v("实现方式二：")]),t._v(" "),n("ul",[n("li",[t._v("和上面方式二类似")])]),t._v(" "),n("div",{staticClass:"language-react extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("incrementAge(index) {\n  const newFriends = [...this.state.friends];\n  newFriends[index].age += 1;\n  this.setState({\n    friends: newFriends\n  })\n}\n")])])]),n("p",[t._v("所以，在真实开发中，我们要尽量保证state、props中的数据不可变性，这样我们才能合理和安全的使用PureComponent和memo。")])])}),[],!1,null,null,null);n.default=s.exports}}]);