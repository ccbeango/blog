(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{401:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"proto3语法指南"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proto3语法指南"}},[t._v("#")]),t._v(" proto3语法指南")]),t._v(" "),s("p",[t._v("本文为阅读官方文档"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto3",target:"_blank",rel:"noopener noreferrer"}},[t._v("Language Guide (protp3)"),s("OutboundLink")],1),t._v("相关总结。主要包括文档要点翻译(非逐句翻译)以及个人理解。")]),t._v(" "),s("p",[t._v("本指南主要是介绍如何使用ProtocolBuffer来构造自己的协议buffer数据，包括"),s("code",[t._v(".proto")]),t._v("语法以及如何从定义的"),s("code",[t._v(".proto")]),t._v("中生成数据访问类。")]),t._v(" "),s("h2",{attrs:{id:"定义message类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义message类型"}},[t._v("#")]),t._v(" 定义message类型")]),t._v(" "),s("p",[t._v("先来看一个非常简单的例子。假设你想定义一个“搜索请求”的消息格式，每一个请求含有一个查询字符串、你感兴趣的查询结果所在的页数，以及每一页多少条查询结果。可以采用如下的方式来定义消息类型的"),s("code",[t._v(".proto")]),t._v("文件：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("syntax")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"proto3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchRequest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" page_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" result_per_page "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("第一行指定正在使用"),s("code",[t._v("proto3")]),t._v("的语法。如果不指定，ProrocolBuffer编译器默认使用"),s("code",[t._v("proto2")]),t._v("。必须在第一行，前面不允许有空行或注释。")]),t._v(" "),s("li",[s("code",[t._v("SearchRequest")]),t._v("包含三个指定的字段（"),s("code",[t._v("name/value")]),t._v("对），每个字段指定要包含在此message类型中的数据。每个字段都有一个"),s("code",[t._v("name")]),t._v("和一个"),s("code",[t._v("type")])])]),t._v(" "),s("h3",{attrs:{id:"指定字段类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定字段类型"}},[t._v("#")]),t._v(" 指定字段类型")]),t._v(" "),s("p",[t._v("在上面的例子中，所有字段都是标量类型：两个整型（page_number和result_per_page），一个string类型（query）。当然，你也可以为字段指定其他的合成类型，包括枚举（enumerations）或其他消息类型。")]),t._v(" "),s("h3",{attrs:{id:"分配字段编号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分配字段编号"}},[t._v("#")]),t._v(" 分配字段编号")]),t._v(" "),s("p",[t._v("每个字段定义都已一个唯一数字"),s("strong",[t._v("unique number")]),t._v("即字段编号。字段编号用于二进制消息格式中标识字段。并且一旦使用则不应更改。")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("ul",[s("li",[t._v("范围1到15的字段编号以一个字节编码，包括字段号和字段类型，可以在 "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#structure",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protocol Buffer Encoding"),s("OutboundLink")],1),t._v(" 中找到更多相关信息。范围16到2047的字段编号以两个字节编码。所以，应该经常出现的字段应该保存到1到15。要记住给为将来可能添加频繁出现的字段预留空间。")]),t._v(" "),s("li",[t._v("最小字段编号是1，最大是"),s("eq",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("msup",[s("mn",[t._v("2")]),s("mn",[t._v("29")])],1),s("mo",[t._v("−")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2^{29} - 1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.897438em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"mord"},[s("span",{staticClass:"mord"},[t._v("2")]),s("span",{staticClass:"msupsub"},[s("span",{staticClass:"vlist-t"},[s("span",{staticClass:"vlist-r"},[s("span",{staticClass:"vlist",staticStyle:{height:"0.8141079999999999em"}},[s("span",{staticStyle:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{staticClass:"pstrut",staticStyle:{height:"2.7em"}}),s("span",{staticClass:"sizing reset-size6 size3 mtight"},[s("span",{staticClass:"mord mtight"},[s("span",{staticClass:"mord mtight"},[t._v("2")]),s("span",{staticClass:"mord mtight"},[t._v("9")])])])])])])])])]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}}),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222222222222222em"}})]),s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[t._v("1")])])])])]),t._v(" 即536870911。")],1),t._v(" "),s("li",[t._v("不能使用19000~19999作为编号（从FieldDescriptor::kFirstReservedNumber 到 FieldDescriptor::kLastReservedNumber），Protobuf协议实现中对这些进行了预留，如果非要在"),s("code",[t._v(".proto")]),t._v("文件中使用这些预留标识号，编译时就会报警。")]),t._v(" "),s("li",[t._v("不能使用之前你自己定义在 "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto3#reserved",target:"_blank",rel:"noopener noreferrer"}},[t._v("reserved"),s("OutboundLink")],1),t._v("的字段编号。")])]),t._v(" "),s("h3",{attrs:{id:"指定字段规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指定字段规则"}},[t._v("#")]),t._v(" 指定字段规则")]),t._v(" "),s("p",[t._v("所指定的消息字段修饰符必须是如下之一：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("singular")]),t._v(" 字段默认值。一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）。")]),t._v(" "),s("li",[s("code",[t._v("repeated")]),t._v(" 在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留。")])]),t._v(" "),s("p",[t._v("在Proto3中，标量数字类型的"),s("code",[t._v("repeated")]),t._v("字段默认使用"),s("code",[t._v("packed")]),t._v("编码。")]),t._v(" "),s("p",[t._v("可以在 "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#packed",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protocol Buffer Encoding"),s("OutboundLink")],1),t._v(" 中找到有关"),s("code",[t._v("packed")]),t._v("编码的更多信息。")]),t._v(" "),s("h3",{attrs:{id:"添加多个message类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加多个message类型"}},[t._v("#")]),t._v(" 添加多个message类型")]),t._v(" "),s("p",[t._v("一个"),s("code",[t._v(".proto")]),t._v("文件中可以定义多个message类型。在定义多个相关的消息的时候，这一点特别有用——例如，如果想定义与"),s("code",[t._v("SearchResponse")]),t._v("消息类型对应的回复消息格式的话，你可以将它添加到相同的"),s("code",[t._v(".proto")]),t._v("文件中，如：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchRequest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" page_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" result_per_page "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"添加注释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加注释"}},[t._v("#")]),t._v(" 添加注释")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v(".proto")]),t._v("中，可以使用C/C++/Java风格的双斜杠"),s("code",[t._v("//")]),t._v(" 语法格式、多行注释使用"),s("code",[t._v("/* ... */")])]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* SearchRequest represents a search query, with pagination options to\n * indicate which results to include in the response. */")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchRequest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" page_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Which page number do we want?")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" result_per_page "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number of results to return per page.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"保留标识符-reserved"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保留标识符-reserved"}},[t._v("#")]),t._v(" 保留标识符（Reserved）")]),t._v(" "),s("p",[t._v("如果你通过完全删除字段或注释字段来更新一个message类型，那么在未来，当用户更新该message时，可以重用该字段编号。")]),t._v(" "),s("p",[t._v("如果你使用旧版本加载相同的.proto文件会导致严重的问题，包括数据损坏、隐私错误等等。")]),t._v(" "),s("p",[t._v("现在有一种确保不会发生这种情况的方法就是为字段tag（reserved name可能会JSON序列化的问题）指定"),s("code",[t._v("reserved")]),t._v("标识符，protocol buffer的编译器会警告未来尝试使用这些域标识符的用户。")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("reserved")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("reserved")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// reserved 2 "foo"; // Error')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("注意，不能在一个"),s("code",[t._v("reserved")]),t._v("声明中混用字段名和字段编号。")]),t._v(" "),s("h3",{attrs:{id:"从-proto-文件生成了什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从-proto-文件生成了什么"}},[t._v("#")]),t._v(" 从**.proto**文件生成了什么")]),t._v(" "),s("p",[t._v("当用protocol buffer编译器来运行.proto文件时，编译器将生成所选择语言的代码，这些代码可以操作在.proto文件中定义的消息类型，包括获取、设置字段值，将消息序列化到一个输出流中，以及从一个输入流中解析消息。")]),t._v(" "),s("ul",[s("li",[t._v("For "),s("strong",[t._v("C++")]),t._v(", the compiler generates a "),s("code",[t._v(".h")]),t._v(" and "),s("code",[t._v(".cc")]),t._v(" file from each "),s("code",[t._v(".proto")]),t._v(", with a class for each message type described in your file.")]),t._v(" "),s("li",[t._v("For "),s("strong",[t._v("Java")]),t._v(", the compiler generates a "),s("code",[t._v(".java")]),t._v(" file with a class for each message type, as well as a special "),s("code",[t._v("Builder")]),t._v(" class for creating message class instances.")]),t._v(" "),s("li",[t._v("For "),s("strong",[t._v("Kotlin")]),t._v(", in addition to the Java generated code, the compiler generates a "),s("code",[t._v(".kt")]),t._v(" file for each message type, containing a DSL which can be used to simplify creating message instances.")]),t._v(" "),s("li",[s("strong",[t._v("Python")]),t._v(" is a little different — the Python compiler generates a module with a static descriptor of each message type in your "),s("code",[t._v(".proto")]),t._v(", which is then used with a "),s("em",[t._v("metaclass")]),t._v(" to create the necessary Python data access class at runtime.")]),t._v(" "),s("li",[t._v("For "),s("strong",[t._v("Go")]),t._v(", the compiler generates a "),s("code",[t._v(".pb.go")]),t._v(" file with a type for each message type in your file.")]),t._v(" "),s("li",[t._v("For "),s("strong",[t._v("Ruby")]),t._v(", the compiler generates a "),s("code",[t._v(".rb")]),t._v(" file with a Ruby module containing your message types.")]),t._v(" "),s("li",[t._v("For "),s("strong",[t._v("Objective-C")]),t._v(", the compiler generates a "),s("code",[t._v("pbobjc.h")]),t._v(" and "),s("code",[t._v("pbobjc.m")]),t._v(" file from each "),s("code",[t._v(".proto")]),t._v(", with a class for each message type described in your file.")]),t._v(" "),s("li",[t._v("For "),s("strong",[t._v("C#")]),t._v(", the compiler generates a "),s("code",[t._v(".cs")]),t._v(" file from each "),s("code",[t._v(".proto")]),t._v(", with a class for each message type described in your file.")]),t._v(" "),s("li",[t._v("For "),s("strong",[t._v("Dart")]),t._v(", the compiler generates a "),s("code",[t._v(".pb.dart")]),t._v(" file with a class for each message type in your file.")])]),t._v(" "),s("p",[t._v("You can find out more about using the APIs for each language by following the tutorial for your chosen language (proto3 versions coming soon). For even more API details, see the relevant "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview",target:"_blank",rel:"noopener noreferrer"}},[t._v("API reference"),s("OutboundLink")],1),t._v(" (proto3 versions also coming soon).")]),t._v(" "),s("h2",{attrs:{id:"标量数值类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标量数值类型"}},[t._v("#")]),t._v(" 标量数值类型")]),t._v(" "),s("p",[t._v("一个标量消息字段可以含有一个如下的类型——该表格展示了定义于.proto文件中的类型，以及与之对应的、在自动生成的访问类中定义的类型：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v(".proto Type")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Notes")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("C++ Type")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Java/Kotlin Type[1]")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Python Type[3]")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Go Type")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("Ruby Type")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("C# Type")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("PHP Type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("double")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("double")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("double")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("float64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Float")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("double")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("float")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("float32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Float")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("float")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使用变长编码，对于负值的效率很低，如果你的域有可能有负值，请使用sint64替代")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Fixnum 或者 Bignum（根据需要）")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("integer")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("uint32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使用变长编码")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int/long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Fixnum 或者 Bignum（根据需要）")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("integer")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("uint64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使用变长编码")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int/long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Bignum")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("ulong")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("integer/string")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("sint32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使用变长编码，这些编码在负值时比int32高效的多")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Fixnum 或者 Bignum（根据需要）")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("integer")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("sint64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("使用变长编码，有符号的整型值。编码时比通常的int64高效。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int/long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Bignum")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("integer/string")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("fixed32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("总是4个字节，如果数值总是比总是比228大的话，这个类型会比uint32高效。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Fixnum 或者 Bignum（根据需要）")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("integer")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("fixed64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("总是8个字节，如果数值总是比总是比256大的话，这个类型会比uint64高效。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int/long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("uint64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Bignum")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("ulong")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("integer/string")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("sfixed32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("总是4个字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Fixnum 或者 Bignum（根据需要）")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("integer")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("sfixed64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("总是8个字节")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int/long")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("Bignum")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("long")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("integer/string")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("bool")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}}),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("bool")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("bool")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("bool")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("TrueClass/FalseClass")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("bool")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("一个字符串必须是UTF-8编码或者7-bit ASCII编码的文本。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("String")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("str/unicode")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("String (UTF-8)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("string")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("bytes")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("可能包含任意顺序的字节数据。")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("ByteString")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("str (Python 2)"),s("br"),t._v("bytes (Python 3)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("[]byte")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("String (ASCII-8BIT)")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("ByteString")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("string")])])])]),t._v(" "),s("p",[t._v("你可以在文章"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Protocol Buffer 编码"),s("OutboundLink")],1),t._v("中，找到更多“序列化消息时各种类型如何编码”的信息。")]),t._v(" "),s("ol",[s("li",[t._v("在java中，无符号32位和64位整型被表示成他们的整型对应形式，最高位被储存在标志位中。")]),t._v(" "),s("li",[t._v("对于所有的情况，设定值会执行类型检查以确保此值是有效。")]),t._v(" "),s("li",[t._v("64位或者无符号32位整型在解码时被表示成为ilong，但是在设置时可以使用int型值设定，在所有的情况下，值必须符合其设置其类型的要求。")]),t._v(" "),s("li",[t._v("python中string被表示成在解码时表示成unicode。但是一个ASCIIstring可以被表示成str类型。")]),t._v(" "),s("li",[t._v("Integer在64位的机器上使用，string在32位机器上使用")])]),t._v(" "),s("h2",{attrs:{id:"默认类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认类型"}},[t._v("#")]),t._v(" 默认类型")]),t._v(" "),s("p",[t._v("当一个message被解析的时候，对于**"),s("code",[t._v("singular")]),t._v("字段**，如果已编码的消息不包含某个特定的"),s("code",[t._v("singular")]),t._v("字段，那么在解析对象中的响应字段会被设置为默认值。这些特定类型的默认值如下：")]),t._v(" "),s("ul",[s("li",[t._v("对于string，默认是一个空string")]),t._v(" "),s("li",[t._v("对于bytes，默认是一个空的bytes")]),t._v(" "),s("li",[t._v("对于bool，默认是false")]),t._v(" "),s("li",[t._v("对于数值类型，默认是0")]),t._v(" "),s("li",[t._v("对于枚举，默认是第一个定义的枚举值，必须为0;")]),t._v(" "),s("li",[t._v("对于消息类型（message），域没有被设置，确切的消息是根据语言确定的，详见"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview",target:"_blank",rel:"noopener noreferrer"}},[t._v("generated code guide"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("对于可重复域"),s("code",[t._v("repeated")]),t._v("的默认值是空（通常情况下是对应语言中空列表）。")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("ul",[s("li",[t._v("对于message中的标量类型字段，一旦message被解析，就无法确定字段是否是被明确地设置为默认值（如一个布尔类型被显示地设置为"),s("code",[t._v("false")]),t._v("）还是没设置（默认使用了"),s("code",[t._v("false")]),t._v("）。你应该在定义你的消息类型时非常注意。例如，如果不希望某个行为在默认情况下发生，那么就不要设置一个布尔值在默认情况下开启这个行为。")]),t._v(" "),s("li",[t._v("如果一个标量message字段设置成了默认值，那么该值不会被序列化传输。")])]),t._v(" "),s("p",[t._v("查看"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("generated code guide"),s("OutboundLink")],1),t._v("选择你的语言的默认值的工作细节。")]),t._v(" "),s("h2",{attrs:{id:"枚举"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),s("p",[t._v("当需要定义一个消息类型的时候，可能想为一个字段指定某“预定义值序列”中的一个值。例如，假设要为每一个"),s("code",[t._v("SearchRequest")]),t._v("消息添加一个"),s("code",[t._v("corpus")]),t._v("字段，而"),s("code",[t._v("corpus")]),t._v("的值可能是"),s("code",[t._v("UNIVERSAL")]),t._v("，"),s("code",[t._v("WEB")]),t._v("，"),s("code",[t._v("IMAGES")]),t._v("，"),s("code",[t._v("LOCAL")]),t._v("，"),s("code",[t._v("NEWS")]),t._v("，"),s("code",[t._v("PRODUCTS")]),t._v("或"),s("code",[t._v("VIDEO")]),t._v("中的一个。 其实可以很容易地实现这一点：通过向消息定义中添加一个枚举（enum）并且为每个可能的值定义一个常量就可以了。")]),t._v(" "),s("p",[t._v("定义常量枚举类型，下面我们定义了一个名为"),s("code",[t._v("Corpus")]),t._v("的枚举其中包含所有值，并设置了一个"),s("code",[t._v("Corpus")]),t._v("类型的字段"),s("code",[t._v("corpus")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchRequest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" page_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" result_per_page "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Corpus")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    UNIVERSAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    WEB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    IMAGES "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LOCAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    NEWS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    PRODUCTS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    VIDEO "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("Corpus")]),t._v(" corpus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如你所见，Corpus枚举的第一个常量映射为0，每个枚举类型必须将其第一个类型映射为0，这是因为：")]),t._v(" "),s("ul",[s("li",[t._v("必须有一个0的值，我们可以用这个0值作为默认值。注：在proto3的默认值规定中，枚举的缺省值为0；")]),t._v(" "),s("li",[t._v("这个零值必须为第一个元素，为了兼容proto2语义，枚举类的第一个值总是默认值。")])]),t._v(" "),s("h3",{attrs:{id:"别名定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#别名定义"}},[t._v("#")]),t._v(" 别名定义")]),t._v(" "),s("p",[t._v("枚举允许定义别名，通过分配相同的值给不同的枚举常量来实现。另外要设置"),s("code",[t._v("allow_alias")]),t._v("选项为"),s("code",[t._v("true")]),t._v("，否则编译器会报错。")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyMessage1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnumAllowingAlias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("option")]),t._v(" allow_alias "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    UNKNOWN "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    STARTED "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    RUNNING "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyMessage2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnumNotAllowingAlias")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    UNKNOWN "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    STARTED "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RUNNING = 1;  // Uncommenting this line will cause a compile error inside Google and a warning message outside.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"枚举值范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举值范围"}},[t._v("#")]),t._v(" 枚举值范围")]),t._v(" "),s("p",[t._v("枚举常量必须在32位整数的范围内。由于枚举值在线路上使用 "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding",target:"_blank",rel:"noopener noreferrer"}},[t._v("varint encoding"),s("OutboundLink")],1),t._v("编码，负值效率低，因此不推荐使用。")]),t._v(" "),s("h3",{attrs:{id:"枚举复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举复用"}},[t._v("#")]),t._v(" 枚举复用")]),t._v(" "),s("p",[t._v("枚举值可以定义在message定义中，像上面的例子；也可以定义在外面，那么就可以被其它message定义复用。")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Corpus")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  UNIVERSAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  WEB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  IMAGES "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  LOCAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  NEWS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  PRODUCTS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  VIDEO "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchRequest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" page_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" result_per_page "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("Corpus")]),t._v(" corpus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("Corpus")]),t._v(" corpus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("也可以在一个message中通过使用"),s("code",[t._v("_MessageType_._EnumType_")]),t._v("的语法格式使用定义在其它message中的枚举类型。如：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchRequest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" page_number "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" result_per_page "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Corpus")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    UNIVERSAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    WEB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    IMAGES "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LOCAL "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    NEWS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    PRODUCTS "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    VIDEO "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("Corpus")]),t._v(" corpus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("SearchRequest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Corpus")]),t._v(" corpus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"编译相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译相关"}},[t._v("#")]),t._v(" 编译相关")]),t._v(" "),s("p",[t._v("当对一个使用了枚举的"),s("code",[t._v(".proto")]),t._v("文件运行protocol buffer编译器的时候，生成的代码中将有一个对应的"),s("code",[t._v("enum")]),t._v("（对Java或C++来说），或者一个特殊的"),s("code",[t._v("EnumDescriptor")]),t._v("类（对 Python来说），它被用来在运行时生成的类中创建一系列的整型值符号常量（symbolic constants）。")]),t._v(" "),s("p",[t._v("在反序列化的过程中，无法识别的枚举值会被保存在消息中，虽然这种表示方式需要依据所使用语言而定。在那些支持开放枚举类型超出指定范围之外的语言中（例如C++和Go），未知枚举值只是存储为它的底层整数表示形式。在使用封闭枚举类型的语言中（Java），使用枚举中的一个类型来表示未识别的值，并且可以使用所支持整型来访问。在其他情况下，如果解析的消息被序列号，未识别的值将保持原样。")]),t._v(" "),s("p",[t._v("关于如何在你的应用程序的消息中使用枚举的更多信息，请查看所选择的语言"),s("a",{attrs:{href:"http://code.google.com/intl/zh-CN/apis/protocolbuffers/docs/reference/overview.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("generated code guide"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"枚举的保留值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举的保留值"}},[t._v("#")]),t._v(" 枚举的保留值")]),t._v(" "),s("p",[t._v("如果通过完全移除字段或注释字段来更新一个message类型，那么在未来，当用户更新该message时，可以重用该字段编号。")]),t._v(" "),s("p",[t._v("如果以后加载同一个"),s("code",[t._v(".proto")]),t._v("的旧版本，可能会导致严重的问题，如数据损坏、隐私漏洞等。")]),t._v(" "),s("p",[t._v("确保不会出现此情况出现的方法是：")]),t._v(" "),s("ul",[s("li",[t._v("指定要删除的字段编号为"),s("code",[t._v("reserved")]),t._v("。")]),t._v(" "),s("li",[t._v("指定要删除的字段名为"),s("code",[t._v("reserved")]),t._v("，但可能会导致JSON序列化的问题。")])]),t._v(" "),s("p",[t._v("可以使用最大关键字指定保留数字值范围为最大值。")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("reserved")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("reserved")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"FOO"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BAR"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("注意，不能在一个"),s("code",[t._v("reserved")]),t._v("声明中混用字段名和数字值。")]),t._v(" "),s("h2",{attrs:{id:"使用其它message类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用其它message类型"}},[t._v("#")]),t._v(" 使用其它message类型")]),t._v(" "),s("p",[t._v("可以使用其它message类型作为字段类型。")]),t._v(" "),s("p",[t._v("例如，假设在每一个"),s("code",[t._v("SearchResponse")]),t._v("消息中包含"),s("code",[t._v("Result")]),t._v("消息，此时可以在相同的"),s("code",[t._v(".proto")]),t._v("文件中定义一个"),s("code",[t._v("Result")]),t._v("消息类型，然后在"),s("code",[t._v("SearchResponse")]),t._v("消息中指定一个"),s("code",[t._v("Result")]),t._v("类型的字段，如：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("Result")]),t._v(" results "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" title "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" snippets "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"导入定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#导入定义"}},[t._v("#")]),t._v(" 导入定义")]),t._v(" "),s("p",[t._v("在上面的示例中，Result 消息类型定义在与 SearchResponse 相同的文件中，如果希望用作字段类型的message类型已经在另一个文件中定义了，该怎么办？")]),t._v(" "),s("p",[t._v("你可以通过导入（importing）其他"),s("code",[t._v(".proto")]),t._v("文件中的定义来使用它们。要导入其他"),s("code",[t._v(".proto")]),t._v("文件的定义，你需要在你的文件中添加一个导入声明，如：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myproject/other_protos.proto"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("默认情况下，只能使用直接导入的"),s("code",[t._v(".proto")]),t._v("文件中的定义。但有时可能需要将"),s("code",[t._v(".proto")]),t._v("文件移至新位置。那么可以在旧位置放一个占位符"),s("strong",[t._v("placeholder")]),t._v("的"),s("code",[t._v(".proto")]),t._v("文件，以"),s("code",[t._v("import public")]),t._v("概念转发所有的导入到新的位置，而不是直接移动"),s("code",[t._v(".proto")]),t._v("文件并更新所有的调用位置因为一个点的变化。")]),t._v(" "),s("p",[t._v("要注意，公共导入功能在Java中不可用。")]),t._v(" "),s("p",[t._v("任何包含"),s("code",[t._v("import public")]),t._v("声明的导入proto文件，可以传递性的依赖被导入的proto文件。例如：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// new.proto")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// All definitions are moved here")]),t._v("\n")])])]),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// old.proto")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// This is the proto that all clients are importing.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new.proto"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"other.proto"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// client.proto")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"old.proto"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// You use definitions from old.proto and new.proto, but not other.proto")]),t._v("\n")])])]),s("p",[t._v("那么，在"),s("code",[t._v("client.proto")]),t._v("中可以使用"),s("code",[t._v("old.proto")]),t._v("和"),s("code",[t._v("new.proto")]),t._v("中定义的message，但不能使用"),s("code",[t._v("other.proto")]),t._v("中的。")]),t._v(" "),s("p",[t._v("编译器使用"),s("code",[t._v("-I")]),t._v("/"),s("code",[t._v("-- proto _ path")]),t._v("标志在编译器命令行上指定的一组目录中搜索导入的文件。如果没有给出此标志参数，则查询调用编译器的目录。通常，应该将 "),s("code",[t._v("-- proto _ path")]),t._v(" 标志设置为项目的根目录，并指定好导入的正确名称就好。")]),t._v(" "),s("h3",{attrs:{id:"使用proto2的message类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用proto2的message类型"}},[t._v("#")]),t._v(" 使用proto2的message类型")]),t._v(" "),s("p",[t._v("可以导入 proto2消息类型并在 proto3消息中使用它们，反之亦然。然而，proto2的枚举类型不能直接用于 proto3语法（如果仅仅在proto2消息中使用是可以的）")]),t._v(" "),s("h2",{attrs:{id:"嵌套类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#嵌套类型"}},[t._v("#")]),t._v(" 嵌套类型")]),t._v(" "),s("p",[t._v("你可以在其他消息类型中定义、使用消息类型，在下面的例子中，Result消息就定义在SearchResponse消息内，如：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchResponse")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Result")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" url "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" title "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" snippets "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("Result")]),t._v(" results "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("如果要在其父消息类型之外复用此message类型，可"),s("code",[t._v("_Parent_._Type_")]),t._v("引用：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeOtherMessage")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("SearchResponse"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Result")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("可以将message嵌套多层：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Outer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Level 0")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MiddleAA")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Level 1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Inner")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Level 2")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v(" ival "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("  booly "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MiddleBB")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Level 1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Inner")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Level 2")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" ival "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("  booly "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"更新一个message类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新一个message类型"}},[t._v("#")]),t._v(" 更新一个message类型")]),t._v(" "),s("p",[t._v("如果现有的message类型不再满足需求，例如，要在消息中添加一个额外的字段——但是同时旧版本写的代码仍然可用，不用担心。更新message而不破坏已有代码是非常简单的。")]),t._v(" "),s("p",[t._v("在更新时只要记住以下的规则即可：")]),t._v(" "),s("ul",[s("li",[t._v("不要更改任何已有的字段编号。")]),t._v(" "),s("li",[t._v("如果添加新字段，那么任何使用旧message格式序列化的message仍可以通过新生成的代码进行解析。要记住这些元素的默认值，以便新代码可以正确地与旧代码生成的message交互。同样，新代码创建的message可以被旧代码解析，只不过新的字段会被忽略掉。详间 "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto3#unknowns",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unknown Fields"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("字段可以被删除，只要字段编号不再用于更新的message类型。你可能想重命名字段作为替代，如添加前缀”OBSOLETE_“，或保留字段编号，以避免之后有人不小心复用了该字段编号。")]),t._v(" "),s("li",[t._v("int32、 uint32、 int64、 uint64和 bool 都是兼容的——这意味着您可以在不破坏向前或向后兼容性的情况下将一个字段从这些类型中的一个更改为另一个。如果一个数字被解析出来不匹配对应的type，那么你会得到与在C++中将数字转成该类型相同的类型（例如，如果一个64位的数字被读作 int32，它将被截断为32位）。")]),t._v(" "),s("li",[t._v("sint32和 sint64相互兼容，但与其他整数类型不兼容。")]),t._v(" "),s("li",[s("code",[t._v("string")]),t._v("和"),s("code",[t._v("bytes")]),t._v("是兼容的，只要字节是有效的 UTF-8编码。")]),t._v(" "),s("li",[t._v("嵌套消息与bytes是兼容的——只要bytes包含该消息的一个编码过的版本。")]),t._v(" "),s("li",[s("code",[t._v("fixed32")]),t._v("与 "),s("code",[t._v("sfixed32")]),t._v("兼容，"),s("code",[t._v("fixed64")]),t._v("与"),s("code",[t._v("sfixed64")]),t._v("兼容。")]),t._v(" "),s("li",[t._v("对于"),s("code",[t._v("string")]),t._v("、"),s("code",[t._v("bytes")]),t._v("和message字段，"),s("code",[t._v("optional")]),t._v("字段和"),s("code",[t._v("repeated")]),t._v("字段兼容。给定一个重复字段的序列化数据作为输入，如果此字段是一个基本类型字段，那么期望此字段是"),s("code",[t._v("optional")]),t._v("的客户端会接受最后一个输入值；如果是一个message类型的字段，则会合并所有的输入元素。注意，这对于数字类型（包括bools和enums）通常是不安全的。重复的数值类型字段可以按打包格式"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/encoding#packed",target:"_blank",rel:"noopener noreferrer"}},[t._v("packed"),s("OutboundLink")],1),t._v("序列化，如果需要可选字段，则不能正确解析这些字段。")]),t._v(" "),s("li",[s("code",[t._v("enum")]),t._v("与"),s("code",[t._v("int32")]),t._v("、 "),s("code",[t._v("uint32")]),t._v("、 "),s("code",[t._v("int64")]),t._v("和 "),s("code",[t._v("uint64")]),t._v("兼容（注意，如果不合适，值将被截断）。但要注意的是，当message被反序列化时，客户端代码可能会区别对待它们，例如，未被识别的proto3枚举类型将保留在消息中，但是当消息被反序列化时，这种类型的表示方式依赖于语言。Int 字段总是保留它们的值。")]),t._v(" "),s("li",[t._v("将"),s("code",[t._v("single")]),t._v("值的字段改为新的"),s("code",[t._v("oneof")]),t._v("值的字段是安全的且二进制兼容。如果能确定没有代码一次设置多个字段，那么将"),s("code",[t._v("multiple")]),t._v("值的字段改为"),s("code",[t._v("oneof")]),t._v("值的字段是安全的。将"),s("code",[t._v("any")]),t._v("值的字段改成现有的"),s("code",[t._v("oneof")]),t._v("值的字段是不安全的。")])]),t._v(" "),s("h2",{attrs:{id:"未知字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#未知字段"}},[t._v("#")]),t._v(" 未知字段")]),t._v(" "),s("p",[t._v("未知字段指的是符合语法规则的Protocol Buffer序列化数据中存在解析器无法识别的字段。")]),t._v(" "),s("p",[t._v("例如，当一个旧得二进制解析数据被一个带有新字段的新二进制发送时，这些新字段变成了旧二进制中的未知字段。")]),t._v(" "),s("p",[t._v("最初，proto3消息总在解析过程中丢弃未知字段，但在3.5版本中，重新引入了未知字段的保留以此来匹配proto2的行为。在3.5及以后的版本中，未知字段会在解析过程中保留，并将其包含在序列化输出中。")]),t._v(" "),s("h2",{attrs:{id:"any类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#any类型"}},[t._v("#")]),t._v(" any类型")]),t._v(" "),s("p",[t._v("any类型消息允许你在没有指定他们的"),s("code",[t._v(".proto")]),t._v("定义的情况下使用消息作为一个嵌套类型。一个Any类型包括一个可以被序列化bytes类型的任意消息，以及一个URL作为一个全局标识符和解析消息类型。")]),t._v(" "),s("p",[t._v("为了使用any类型，你需要导入"),s("code",[t._v("import google/protobuf/any.proto")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"google/protobuf/any.proto"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ErrorStatus")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("google"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protobuf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Any")]),t._v(" details "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("给定消息类型的默认类型 URL 是"),s("code",[t._v("type.googleapis.com/_packagename_._messagename_")]),t._v("。")]),t._v(" "),s("p",[t._v("不同语言的实现会支持动态库以线程安全(typesafe)的方式去帮助封装或者解封装Any值——例如，在 Java 中，Any 类型将有特殊的 "),s("code",[t._v("pack ()")]),t._v("和 "),s("code",[t._v("unpack ()")]),t._v("访问器，而在 C++中有"),s("code",[t._v("PackFrom()")]),t._v("和"),s("code",[t._v("UnpackTo ()")]),t._v("方法:")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Storing an arbitrary message type in Any.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("NetworkErrorDetails")]),t._v(" details "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("ErrorStatus")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstatus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_details")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PackFrom")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("details"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Reading an arbitrary message from Any.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("ErrorStatus")]),t._v(" status "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("const Any"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" detail "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("details")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("detail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Is"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NetworkErrorDetails"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("NetworkErrorDetails")]),t._v(" network_error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    detail"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("UnpackTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("network_error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" processing network_error "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("目前，用于Any类型的动态库仍在开发之中")]),t._v(" "),s("p",[t._v("If you are already familiar with "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto",target:"_blank",rel:"noopener noreferrer"}},[t._v("proto2 syntax"),s("OutboundLink")],1),t._v(", the "),s("code",[t._v("Any")]),t._v(" can hold arbitrary proto3 messages, similar to proto2 messages which can allow "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto#extensions",target:"_blank",rel:"noopener noreferrer"}},[t._v("extensions"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"oneof类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oneof类型"}},[t._v("#")]),t._v(" oneof类型")]),t._v(" "),s("p",[t._v("如果有一条包含许多字段的消息，并且最多同时设置一个字段，那么可以通过使用"),s("code",[t._v("oneof")]),t._v("特性来强制执行此行为并节省内存。")]),t._v(" "),s("p",[t._v("oneof字段类似于常规字段，除了所有字段在一个oneof共享内存中，而且最多同时设置一个字段。设置其中的任何成员都会自动清除所有其它成员。可以使用专门的"),s("code",[t._v("case()")]),t._v("或"),s("code",[t._v("WhichOneof()")]),t._v("方法来检查oneof中哪个值被设置了，具体使用哪个方法取决与你使用的语言。")]),t._v(" "),s("h3",{attrs:{id:"使用oneof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用oneof"}},[t._v("#")]),t._v(" 使用oneof")]),t._v(" "),s("p",[t._v("为了在"),s("code",[t._v(".proto")]),t._v("定义Oneof字段， 你需要在名字前面加上"),s("code",[t._v("oneof")]),t._v("关键字, 比如下面例子的"),s("code",[t._v("test_oneof")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SampleMessage")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("oneof")]),t._v(" test_oneof "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("SubMessage")]),t._v(" sub_message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("然后可以添加任何类型的字段到oneof定义中，除了"),s("code",[t._v("map")]),t._v("字段和"),s("code",[t._v("repeated")]),t._v("字段。")]),t._v(" "),s("p",[t._v("在生成的代码中，oneof字段具有与常规字段相同的 getter 和 setter。还有一个专门的方法来检查oneof中设置了哪个值(如果有的话)。更多关于oneof API的信息参考你使用的语方言的 "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview",target:"_blank",rel:"noopener noreferrer"}},[t._v("API reference"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"oneof-features"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oneof-features"}},[t._v("#")]),t._v(" Oneof Features")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("设置一个oneof字段将自动清除该oneof字段的所有其他成员。因此，如果设置了数个oneof字段，那么只有最后设置的字段有值。")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[t._v("SampleMessage "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CHECK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("has_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutable_sub_message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Will clear name field.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("CHECK")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("has_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("如果解析器遇到同一个oneof的多个成员，则只有最后的成员会被用于解析消息。")])]),t._v(" "),s("li",[s("p",[t._v("oneof不能是"),s("code",[t._v("repeated")]),t._v("的")])]),t._v(" "),s("li",[s("p",[t._v("Reflection APIs work for oneof fields.")])]),t._v(" "),s("li",[s("p",[t._v("如果将 oneof 字段设置为默认值(例如将 int32 oneof 字段设置为0) ，那么将设置该字段的值为"),s("code",[t._v("oneof")]),t._v("中的指定值，并且该值会被序列化。")])]),t._v(" "),s("li",[s("p",[t._v("如果使用C++,需确保代码不会导致内存泄漏. 下面的代码会崩溃， 因为sub_message 已经通过set_name()删除了")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('SampleMessage message;\nSubMessage* sub_message = message.mutable_sub_message();\nmessage.set_name("name");      // Will delete sub_message\nsub_message->set_...            // Crashes here\n')])])])]),t._v(" "),s("li",[s("p",[t._v("Again，在C++中，如果你使用Swap()两个oneof消息，每个消息，两个消息将拥有对方的值，例如在下面的例子中，msg1会拥有sub_message并且msg2会有name。")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('SampleMessage msg1;\nmsg1.set_name("name");\nSampleMessage msg2;\nmsg2.mutable_sub_message();\nmsg1.swap(&msg2);\nCHECK(msg1.has_sub_message());\nCHECK(msg2.has_name());\n')])])])])]),t._v(" "),s("h3",{attrs:{id:"向后兼容问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向后兼容问题"}},[t._v("#")]),t._v(" 向后兼容问题")]),t._v(" "),s("p",[t._v("添加或删除oneof字段时候要小心。如果检查oneof的返回值是"),s("code",[t._v("None")]),t._v("或"),s("code",[t._v("NOT_SET")]),t._v("，这可能意味着oneof没有被赋值，或者在一个不同的版本中被赋值了。没有办法区分，因为没有办法知道一个未知字段是否是oneof的成员。")]),t._v(" "),s("h4",{attrs:{id:"tag-复用问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tag-复用问题"}},[t._v("#")]),t._v(" Tag 复用问题")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("将字段移入或移出oneof")]),t._v("：在序列化和解析消息之后，您可能会丢失一些信息(某些字段将被清除)。但是，您可以安全地将单个字段移动到新的oneof字段中，并且如果已知之前只设置了一个字段，则可以移动多个字段。")]),t._v(" "),s("li",[t._v("**删除一个字段并将其添加回来：**这可能会在消息被序列化和解析之后清除当前设置的oneof字段。")]),t._v(" "),s("li",[t._v("**分割或合并oneof：**和移动常规字段问题相似。即和将字段移入或移出oneof类似。")])]),t._v(" "),s("h2",{attrs:{id:"map类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#map类型"}},[t._v("#")]),t._v(" map类型")]),t._v(" "),s("p",[t._v("如果你想创建一个关联映射作为你数据定义的一部分，Protocol Buffers提供了一个方便的快捷语法：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token map class-name"}},[t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("key_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map_field "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[s("code",[t._v("key_type")]),t._v("可以是任意的"),s("code",[t._v("intergral")]),t._v("类型或"),s("code",[t._v("string")]),t._v("类型。因此，可以是除了浮点类型"),s("code",[t._v("floating point")]),t._v("和"),s("code",[t._v("types")]),t._v("类型外的任意标量类型。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("value_type")]),t._v("可以是除了另一个"),s("code",[t._v("map")]),t._v("类型的任意类型。")])])]),t._v(" "),s("p",[t._v("例如，如果你希望创建一个project的映射，每个Projecct使用一个string作为key，你可以像下面这样定义：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token map class-name"}},[t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Project"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" projects "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("需要注意的点：")]),t._v(" "),s("ul",[s("li",[t._v("map不能是"),s("code",[t._v("repeated")]),t._v("的")]),t._v(" "),s("li",[t._v("序列化后的顺序和map迭代器的顺序是不确定的，所以你不要期望以固定顺序处理Map")]),t._v(" "),s("li",[t._v("当为.proto文件产生生成文本格式的时候，map会按照key 的顺序排序，数值化的key会按照数值排序。")]),t._v(" "),s("li",[t._v("当从buffer中解析或合并时，如果有重复的map键，则使用最后出现的键。当从文本格式解析映射时，如果有重复的键，解析可能会失败。")]),t._v(" "),s("li",[t._v("如果为映射字段提供了键但没有值，则该字段序列化时的行为与语言相关。在C++ 、 Java、 Kotlin 和 Python 中，类型的默认值是序列化的，而在其他语言中，没有任何值是序列化的。")])]),t._v(" "),s("p",[t._v("生成的map API 目前可用于所有支持 proto3的语言。您可以在相关的 "),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/overview",target:"_blank",rel:"noopener noreferrer"}},[t._v("API reference"),s("OutboundLink")],1),t._v("中找到更多关于所选语言的映射 API 的信息。")]),t._v(" "),s("h3",{attrs:{id:"向后兼容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向后兼容"}},[t._v("#")]),t._v(" 向后兼容")]),t._v(" "),s("p",[t._v("map的语法等价于下面的语法，因此不支持maps的Protocol Buffer实现仍然可以处理你的数据：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MapFieldEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("key_type")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("value_type")]),t._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("MapFieldEntry")]),t._v(" map_field "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" N"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("任何支持maps的Protocol Buffer实现都必须生成和接受上述定义可以接受的数据。")]),t._v(" "),s("h2",{attrs:{id:"package"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#package"}},[t._v("#")]),t._v(" package")]),t._v(" "),s("p",[t._v("可以向"),s("code",[t._v(".proto")]),t._v(" 文件添加一个可选"),s("code",[t._v("package")]),t._v("声明符，以防止协议消息类型之间的名称冲突。")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Open")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("然后，可以在定义message类型的字段时使用"),s("code",[t._v("package")]),t._v("说明符:")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Open")]),t._v(" open "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("package声明符会根据使用语言的不同影响生成的代码。")]),t._v(" "),s("ul",[s("li",[t._v("对于C++，产生的类会被包装在C++的命名空间中，如上例中的Open会被封装在 foo::bar空间中； - 对于Java，包声明符会变为java的一个包，除非在.proto文件中提供了一个明确有java_package；")]),t._v(" "),s("li",[t._v("对于 Python，这个包声明符是被忽略的，因为Python模块是按照其在文件系统中的位置进行组织的。")]),t._v(" "),s("li",[t._v("对于Go，包可以被用做Go包名称，除非你显式的提供一个option go_package在你的.proto文件中。")]),t._v(" "),s("li",[t._v("对于Ruby，生成的类可以被包装在内置的Ruby名称空间中，转换成Ruby所需的大小写样式 （首字母大写；如果第一个符号不是一个字母，则使用PB_前缀），例如Open会在Foo::Bar名称空间中。")]),t._v(" "),s("li",[t._v("对于javaNano包会使用Java包，除非你在你的文件中显式的提供一个option java_package。")]),t._v(" "),s("li",[t._v("对于C#包可以转换为PascalCase后作为名称空间，除非你在你的文件中显式的提供一个option csharp_namespace，例如，Open会在Foo.Bar名称空间中")])]),t._v(" "),s("h3",{attrs:{id:"包和包名解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#包和包名解析"}},[t._v("#")]),t._v(" 包和包名解析")]),t._v(" "),s("p",[t._v("在 Protocol Buffer 中，类型名称解析的工作原理类似于 C++ : 首先搜索最内层的作用域，然后搜索下一个最内层的作用域，依此类推，每个包会被看作是其父类包的内部类。当然对于 （foo.bar.Baz）这样以“.”分隔的意味着是从最外层作用域开始的。")]),t._v(" "),s("p",[t._v("ProtocolBuffer编译器通过解析导入的"),s("code",[t._v(".proto")]),t._v("文件来解决所有类型名称。每种语言的代码生成器都知道如何在该语言中引用每种类型，即使它有不同的作用域规则。")]),t._v(" "),s("h2",{attrs:{id:"定义services"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义services"}},[t._v("#")]),t._v(" 定义Services")]),t._v(" "),s("p",[t._v("如果希望将消息类型与 RPC (远程过程调用)系统一起使用，可以在.proto文件中定义RPC服务接口，编译器将以您选择的语言生成服务接口代码和存根。")]),t._v(" "),s("p",[t._v("因此，例如，如果您希望定义一个 RPC 服务，其方法接受 SearchRequest 并返回一个 SearchResponse，则可以在"),s("code",[t._v(".proto")]),t._v("文件中定义它，如下所示：")]),t._v(" "),s("div",{staticClass:"language-protobuf extra-class"},[s("pre",{pre:!0,attrs:{class:"language-protobuf"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("service")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rpc")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchRequest")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SearchResponse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("最直观的使用protocol buffer的RPC系统是"),s("a",{attrs:{href:"https://github.com/grpc/grpc-experiments",target:"_blank",rel:"noopener noreferrer"}},[t._v("gRPC"),s("OutboundLink")],1),t._v(",一个由谷歌开发的语言和平台中的开源的PRC系统，gRPC在使用protocl buffer时非常有效，如果使用特殊的protocol buffer插件可以直接为您从.proto文件中产生相关的RPC代码。")]),t._v(" "),s("p",[t._v("如果你不想使用gRPC，也可以使用protocol buffer用于自己的RPC实现，你可以从"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto#services",target:"_blank",rel:"noopener noreferrer"}},[t._v("proto2语言指南"),s("OutboundLink")],1),t._v("中找到更多信息")]),t._v(" "),s("p",[t._v("还有一些第三方开发的PRC实现使用Protocol Buffer。参考"),s("a",{attrs:{href:"https://github.com/google/protobuf/blob/master/docs/third_party.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("第三方插件wiki"),s("OutboundLink")],1),t._v("查看这些实现的列表。")]),t._v(" "),s("h2",{attrs:{id:"json映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#json映射"}},[t._v("#")]),t._v(" JSON映射")]),t._v(" "),s("p",[t._v("Proto3支持JSON中的规范编码，从而更容易在系统之间共享数据。在下表中逐个描述类型。")]),t._v(" "),s("p",[t._v("如果在JSON编码的数据中缺少一个值，或者其值为null，那么在Protocol Buffer解析时，该值将被解释为适当的默认值。如果一个字段在协议缓冲区中具有默认值，为了节省空间，默认情况下 json 编码的数据中将省略该字段。JSON实现中可以提供选项以触发具有默认值的字段的选项的JSON编码输出。")]),t._v(" "),s("p",[t._v("表详见"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto3#adding_more_message_types",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON Mapping"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Proto3 JSON实现应该具有的能力详见"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto3#json_options",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON options"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[t._v("#")]),t._v(" Options")]),t._v(" "),s("p",[s("code",[t._v(".proto")]),t._v("文件中的一个声明可以用多个选项注释。选项不会改变声明的总体含义。但可能会影响在特定上下文中处理声明的方式。可用选项的完整列表在 "),s("code",[t._v("google/protobuf/descriptor.proto")]),t._v(" 中定义。")]),t._v(" "),s("p",[t._v("有些选项是文件级选项，这意味着它们应该在顶级作用域中编写，而不是在任何message、enum或服务定义中。有些选项是message级选项，这意味着它们应该写在message定义中。有些选项是field级选项，这意味着它们应该写在field定义中。选项也可以在枚举类型、枚举值、oneof字段、服务类型和服务方法上编写；但是，目前没有针对它们的有用选项。")]),t._v(" "),s("p",[t._v("常用选项详见"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto3#options",target:"_blank",rel:"noopener noreferrer"}},[t._v("Options"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"generating-your-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generating-your-classes"}},[t._v("#")]),t._v(" Generating Your Classes")]),t._v(" "),s("p",[t._v("可以使用编译器"),s("code",[t._v("protoc")]),t._v("来生成对你使用语言的代码。")]),t._v(" "),s("p",[t._v("详见"),s("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/proto3#generating",target:"_blank",rel:"noopener noreferrer"}},[t._v("Generating Your Classes"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);