(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{408:function(n,e,t){"use strict";t.r(e);var a=t(1),r=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"react学习-六-组件化开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react学习-六-组件化开发"}},[n._v("#")]),n._v(" React学习（六）—— 组件化开发")]),n._v(" "),e("p",[n._v("组件化设计思维3个关键点：")]),n._v(" "),e("ol",[e("li",[n._v("完整组件方案：将组件视为一个独立的产品，从多维度，多场景输出组件的方案和组合标准。")]),n._v(" "),e("li",[n._v("组件化思维：从需求出发，拆解页面表达结构和所需组件。")]),n._v(" "),e("li",[n._v("通用页面规则：通用的页面与组件的栅格体系及替换规则。")])]),n._v(" "),e("p",[n._v("注：https://www.zcool.com.cn/article/ZNTQ5NzM2.html")]),n._v(" "),e("h2",{attrs:{id:"组件的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件的分类"}},[n._v("#")]),n._v(" 组件的分类")]),n._v(" "),e("p",[n._v("React组件灵活多样，按照不同的方式可以分为很多类组件：")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("根据组件的定义方式，可以分为：函数组件"),e("code",[n._v("Functional Component")]),n._v(" 和类组件"),e("code",[n._v("Class Component")]),n._v("；")])]),n._v(" "),e("li",[e("p",[n._v("根据组件内部是否有状态需要维护，可以分成：无状态组件"),e("code",[n._v("Stateless Component")]),n._v("和有状态组件"),e("code",[n._v("Stateful Component")])])]),n._v(" "),e("li",[e("p",[n._v("根据组件的不同职责，可以分成：展示型组件"),e("code",[n._v("Presentational Component")]),n._v("和容器型组件"),e("code",[n._v("Container Component")]),n._v("；")])]),n._v(" "),e("li",[e("p",[n._v("还有其他概念的组件，如异步组件、高阶组件等。")])])]),n._v(" "),e("p",[n._v("这些概念有很多重叠，当时他们最主要是关注数据逻辑和UI展示的分离：")]),n._v(" "),e("ul",[e("li",[n._v("函数组件、无状态组件、展示型组件主要关注UI的展示")]),n._v(" "),e("li",[n._v("类组件、有状态组件、容器组件主要关注数据逻辑；")])]),n._v(" "),e("h2",{attrs:{id:"类组件和函数组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类组件和函数组件"}},[n._v("#")]),n._v(" 类组件和函数组件")]),n._v(" "),e("p",[n._v("类组件的定义有如下要求：")]),n._v(" "),e("ul",[e("li",[n._v("组件的名称是大写的")]),n._v(" "),e("li",[n._v("需要继承"),e("code",[n._v("React.Component")])]),n._v(" "),e("li",[n._v("必须实现"),e("code",[n._v("render")]),n._v("函数")])]),n._v(" "),e("p",[n._v("创建一个类组件，我们会使用"),e("code",[n._v("class")]),n._v("创建一个组件：")]),n._v(" "),e("ul",[e("li",[e("p",[e("code",[n._v("constructor")]),n._v("是可选的，我们通常会在"),e("code",[n._v("constructor")]),n._v("中初始化一些数据；")])]),n._v(" "),e("li",[e("p",[e("code",[n._v("this.state")]),n._v("中维护的就是我们组件内部的数据")])]),n._v(" "),e("li",[e("p",[e("code",[n._v("render()")]),n._v("方法是class组件中必须实现的方法")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React from 'react';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div>Hello World</div>\n    );\n  }\n}                                           \n")])])]),e("p",[n._v("当render被调用时，它会检查"),e("code",[n._v("this.props")]),n._v("和"),e("code",[n._v("this.state")]),n._v("的变化并返回以下类型之一：")]),n._v(" "),e("ul",[e("li",[n._v("React元素：通常通过JSX创建，如"),e("code",[n._v("<div>")]),n._v("会被React渲染成DOM节点，"),e("code",[n._v("<Component/>")]),n._v("会被React渲染为自定义组件，无论是html标签元素还是"),e("code",[n._v("<Compoennt/>")]),n._v("均为React元素。")]),n._v(" "),e("li",[n._v("数组或"),e("code",[n._v("fragments")]),n._v("：使得"),e("code",[n._v("render")]),n._v("方法可以返回多个元素")]),n._v(" "),e("li",[e("code",[n._v("Portals")]),n._v("：可以渲染子节点到不同的DOM子树中。")]),n._v(" "),e("li",[n._v("字符串或数值类型：它们在DOM中会被渲染为文本节点")]),n._v(" "),e("li",[n._v("布尔类型或"),e("code",[n._v("null")]),n._v("：什么都不渲染")])])])]),n._v(" "),e("p",[n._v("函数组件：")]),n._v(" "),e("p",[n._v("函数组件是使用"),e("code",[n._v("function")]),n._v("来进行定义的函数，只是这个函数会返回和类组件中"),e("code",[n._v("render")]),n._v("函数返回一样的内容。")]),n._v(" "),e("p",[n._v("函数自建的特点：")]),n._v(" "),e("ul",[e("li",[n._v("没有生命周期，也会被更新并挂在，没有生命周期函数；")]),n._v(" "),e("li",[n._v("没有"),e("code",[n._v("this")])]),n._v(" "),e("li",[n._v("没有内部状态"),e("code",[n._v("state")])])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("export default function App() {\n  return (\n    <h2>我是函数组件</h2>\n  );\n}\n")])])]),e("h2",{attrs:{id:"生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[n._v("#")]),n._v(" 生命周期")]),n._v(" "),e("blockquote",[e("p",[n._v("React生命周期详情：")]),n._v(" "),e("p",[n._v("https://zh-hans.reactjs.org/docs/react-component.html")]),n._v(" "),e("p",[n._v("https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/")])]),n._v(" "),e("p",[n._v("很多的事物都有从创建到销毁的整个过程，这个过程称之为是生命周期。")]),n._v(" "),e("p",[n._v("React组件有自己的生命周期，React内部为了告诉我们当前处于哪些阶段，会对我们组件内部实现的某些函数进行回调，这些函数就是生命周期函数。")]),n._v(" "),e("p",[n._v("我们在谈React的生命周期时，主要谈的是类的生命周期，因为函数式组件是没有生命周期函数的；")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B517.png",alt:"img"}})]),n._v(" "),e("p",[n._v("生命周期大致可分为如下几个阶段：")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("挂载（初始化）")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("constructor()")]),n._v(" "),e("ul",[e("li",[n._v("如果不初始化或不进行方法绑定，则不需要为React组件实现构造函数")]),n._v(" "),e("li",[n._v("一般做两件事情：\n"),e("ul",[e("li",[n._v("通过给 this.state 赋值对象来初始化内部的state；")]),n._v(" "),e("li",[n._v("为事件绑定实例（this）")])])])])]),n._v(" "),e("li",[e("code",[n._v("getDerivedStateFromProps()")]),n._v(" 不常用\n"),e("ul",[e("li",[n._v("state 的值在任何时候都\n依赖于 props时使用；该方法返回一个对象来更新state；")])])]),n._v(" "),e("li",[e("code",[n._v("render()")])]),n._v(" "),e("li",[e("code",[n._v("componentDidMount()")]),n._v(" "),e("ul",[e("li",[n._v("会在组件挂载后（插入 DOM 树中）立即调用")]),n._v(" "),e("li",[n._v("通常进行的操作是：\n"),e("ul",[e("li",[n._v("依赖于DOM的操作可以在这里进行")]),n._v(" "),e("li",[n._v("在此处发送网络请求（官方建议）")]),n._v(" "),e("li",[n._v("在此处添加一些订阅（在"),e("code",[n._v("componentWillUnmount")]),n._v("取消订阅）")])])])])])])]),n._v(" "),e("li",[e("p",[n._v("更新")]),n._v(" "),e("ul",[e("li",[e("p",[e("code",[n._v("static getDeriveStateFromProps()")]),n._v(" 不常用")])]),n._v(" "),e("li",[e("p",[e("code",[n._v("shouldComponentUpdate()")])]),n._v(" "),e("ul",[e("li",[n._v("根据返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。默认行为是 state 每次发生变化组件都会重新渲染")])])]),n._v(" "),e("li",[e("p",[e("code",[n._v("render()")])])]),n._v(" "),e("li",[e("p",[e("code",[n._v("getSnapshotBeforeUpdate()")]),n._v(" 不常用")]),n._v(" "),e("ul",[e("li",[n._v("在React更新DOM之前回调的一个函数，可以获取DOM更新前的一些信息（比如说滚动位置）；")])])]),n._v(" "),e("li",[e("p",[e("code",[n._v("componentDidUpdate()")])]),n._v(" "),e("ul",[e("li",[e("p",[n._v("会在更新后会被立即调用，首次渲染不会执行此方法")])]),n._v(" "),e("li",[e("p",[n._v("当组件更新后，可以在此处对 DOM 进行操作；")])]),n._v(" "),e("li",[e("p",[n._v("如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("componentDidUpdate(prevProps) {\n  // 典型用法（不要忘记比较 props）：\n  if (this.props.userID !== prevProps.userID) {\n    this.fetchData(this.props.userID);\n  }\n}\n")])])])])])])])]),n._v(" "),e("li",[e("p",[n._v("卸载")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("componentWillUnmount()")]),n._v(" "),e("ul",[e("li",[n._v("会在组件卸载及销毁之前直接调用")]),n._v(" "),e("li",[n._v("在此方法中执行必要的清理操作；例如，清除 timer，取消网络请求或清除；在componentDidMount() 中创建的订阅等；")])])])])])]),n._v(" "),e("p",[n._v("当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("static getDerivedStateFromError()")])]),n._v(" "),e("li",[e("code",[n._v("componnetDidCatch()")])])]),n._v(" "),e("p",[n._v("下面是一个简单的生命周期例子：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B518.gif",alt:"11111"}})]),n._v(" "),e("p",[n._v("效果如上，当首次进入页面时，执行挂在阶段生命周期。当点击"),e("code",[n._v("+1")]),n._v("按钮，执行更新生命周期。再点击切换按钮，第一次看到"),e("code",[n._v("<TipCom/>")]),n._v("组件执行了卸载生命周期函数，第二次点击，可以看到"),e("code",[n._v("<App/>")]),n._v("组件再次执行了更新。")]),n._v(" "),e("p",[n._v("代码如下：")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\n\nclass TipCom extends Component {\n  render() {\n    return (\n      <div>你好，你来了</div>\n    );\n  }\n\n  componentWillUnmount() {\n    console.log('调用TipCom组件的componentWillUnmount方法');\n  }\n}\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    console.log('执行组件的constructor方法');\n\n    this.state = {\n      counter: 0,\n      isShowTip: true\n    };\n  }\n\n  increment() {\n    console.log('点击+1按钮更新');\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  }\n\n  changeTipShow() {\n    console.log('点击切换按钮更新');\n\n    this.setState({\n      isShowTip: !this.state.isShowTip\n    });\n  }\n\n  render() {\n    console.log('执行组件的render方法');\n\n    return (\n      <div>\n        我是生命周期过程组件 | {this.state.counter}\n        <button onClick={() => this.increment()}>+</button> \n        <hr/>\n        <button onClick={() => this.changeTipShow()}>切换</button>\n        { this.state.isShowTip && <TipCom/> }\n      </div>\n    )\n  }\n  \n  componentDidMount() {\n    console.log('执行组件的componentDidMount方法');\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('执行组件的shouldComponentUpdate方法');\n    \n    return true;\n  }\n\n  componentDidUpdate() {\n    console.log('执行组件的componentDidUpdate方法');\n  }\n}\n")])])]),e("h2",{attrs:{id:"组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件通信"}},[n._v("#")]),n._v(" 组件通信")]),n._v(" "),e("h3",{attrs:{id:"组件间的嵌套"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件间的嵌套"}},[n._v("#")]),n._v(" 组件间的嵌套")]),n._v(" "),e("p",[n._v("在开发过程中，组件之间的嵌套是很常见的一个现象，正式一个个组件，构成了我们的应用，如果所有的逻辑都放在一个组件中，那么这组件就会变得非常臃肿难以维护。将组件进行拆分，然后再进行组合嵌套一起，最终便形成了应用。")]),n._v(" "),e("p",[n._v("一个页面的构成，往往有多层嵌套，下面是一个简单的例子：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B519.png",alt:"image-20210109161329779"}})]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\n\nfunction Header() {\n  return (\n    <h2>我是Header组件</h2>\n  );\n}\n\nfunction Banner() {\n  return (\n    <h3>我是Banner组件</h3>\n  );\n}\n\nfunction ProductList() {\n  return (\n    <div>\n      <ul>\n        <li>商品1</li>\n        <li>商品2</li>\n        <li>商品3</li>\n        <li>商品4</li>\n        <li>商品5</li>\n      </ul>\n    </div>\n  );\n}\n\nfunction Main() {\n  return (\n    <div>\n      <Banner />\n      <ProductList />\n    </div>\n  );\n}\n\n\nfunction Footer() {\n  return (\n    <h2>我是Footer组件</h2>\n  );\n}\n\nexport default class Com01 extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    )\n  }\n}\n")])])]),e("p",[n._v("假如这个例子更复杂一些，比如"),e("code",[n._v("Com01")]),n._v("可能使用了多个"),e("code",[n._v("Header")]),n._v("，每个地方Header展示的内容不同，那么我们需要使用者传递给"),e("code",[n._v("Header")]),n._v("一些数据，让其进行展示")]),n._v(" "),e("p",[n._v("又比如我们在"),e("code",[n._v("Main")]),n._v("中一次性请求了"),e("code",[n._v("Banner")]),n._v("数据和"),e("code",[n._v("ProductList")]),n._v("数据，那么就需要传递给他们来进行展示；也可能是子组件中发生了事件，需要由父组件来完成某些操作，那就需要子组件向父组件传递事件；")]),n._v(" "),e("p",[n._v("React项目中，组件间的通信时非常重要的环节。")]),n._v(" "),e("h3",{attrs:{id:"父组件传递子组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父组件传递子组件"}},[n._v("#")]),n._v(" 父组件传递子组件")]),n._v(" "),e("p",[n._v("父组件在展示子组件，可能会传递一些数据给子组件：")]),n._v(" "),e("ul",[e("li",[n._v("父组件通过"),e("strong",[n._v("属性=值")]),n._v("的形式来传递给子组件数据；")]),n._v(" "),e("li",[n._v("子组件通过**props **参数获取父组件传递过来的数据；")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import React, { Component } from \'react\';\n\n// 类组件\nclass ChildCpn extends Component {\n  // 可省略\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <h2>类子组件展示数据： { this.props.name}</h2>\n    );\n  }\n}\n\n// 函数组件\nfunction ChildCpn2(props) {\n  return (\n    <h2>函数子组件展示数据： { props.name}</h2>\n  );\n}\n\nexport default class Com02 extends Component {\n  render() {\n    return (\n      <div>\n        <ChildCpn name="Ccbean" />\n        <ChildCpn2 name="Ccbean" />\n      </div>\n    )\n  }\n}\n\n')])])]),e("p",[n._v("上面的构造函数实现方法，是派生类的默认实现方法，即没有构造函数时，会执行默认的构造函数，且实现完全相同。")]),n._v(" "),e("h4",{attrs:{id:"参数proptypes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参数proptypes"}},[n._v("#")]),n._v(" 参数propTypes")]),n._v(" "),e("blockquote",[e("p",[n._v("https://zh-hans.reactjs.org/docs/typechecking-with-proptypes.html")])]),n._v(" "),e("p",[n._v("对于传递给子组件的数据，有时候我们可能希望进行验证，特别是对于大型项目来说。")]),n._v(" "),e("p",[n._v("如果你项目中默认继承了"),e("code",[n._v("Flow")]),n._v("或者"),e("code",[n._v("TypeScript")]),n._v("，那么直接就可以进行类型验证。如果没有使用，也可以通过 "),e("code",[n._v("prop-types")]),n._v("库来进行参数验证；")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ChildCpn extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    height: PropTypes.number,\n    letters: PropTypes.array\n  };\n\n  static defaultProps = {\n    name: 'Tom',\n    height: 188,\n    letters: ['D', 'E', 'F']\n  };\n\n  // 可省略\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n      <h2>函数子组件展示数据： {this.props.name}</h2>\n      <ul>\n        {\n          this.props.letters.map(item => <li key={item}>{item}</li>)\n        }\n      </ul>\n    </div>\n    );\n  }\n}\n\nChildCpn2.propTypes = {\n  name: PropTypes.string.isRequired,\n  height: PropTypes.number,\n  letters: PropTypes.array\n};\n\nChildCpn2.defaultProps = {\n  name: 'Tom',\n  height: 188,\n  letters: ['D', 'E', 'F']\n};\n\nfunction ChildCpn2(props) {\n  return (\n    <div>\n      <h2>函数子组件展示数据： {props.name}</h2>\n      <ul>\n        {\n          props.letters.map(item => <li key={item}>{item}</li>)\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default class Com02 extends Component {\n  render() {\n    return (\n      <div>\n        <ChildCpn/>\n        <ChildCpn2 name='Ccbean' height=\"182\" letters={['A', 'B', 'C']} />\n        <ChildCpn2 />\n      </div>\n    )\n  }\n}\n")])])]),e("p",[n._v("上面的代码会导致React打印一条警告：")]),n._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[n._v("Warning: Failed prop type: Invalid prop "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")]),n._v("height"),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")])]),n._v(" of "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("type")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")]),n._v("string"),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")])]),n._v(" supplied to "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")]),n._v("ChildCpn2"),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")])]),n._v(", expected "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")]),n._v("number"),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")])]),n._v("\n")])])]),e("p",[n._v("假如没有传递"),e("code",[n._v("name")]),n._v("，"),e("code",[n._v("name")]),n._v("在"),e("code",[n._v("PropTypes")]),n._v("中限制是必须的，会出现如下警告：")]),n._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[n._v("Warning: Failed prop type: The prop "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")]),n._v("name"),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")])]),n._v(" is marked as required "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("in")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")]),n._v("ChildCpn2"),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")])]),n._v(", but its value is "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")]),n._v("undefined"),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("`")])]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n")])])]),e("p",[e("strong",[n._v("如果需要做大量的验证，建议直接使用"),e("code",[n._v("TypeScript")]),n._v("。")])]),n._v(" "),e("p",[n._v("如果没有传递值，当希望使用有默认值，可以使用"),e("code",[n._v("defaultProps")]),n._v("。")]),n._v(" "),e("h3",{attrs:{id:"子组件传递父组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子组件传递父组件"}},[n._v("#")]),n._v(" 子组件传递父组件")]),n._v(" "),e("p",[n._v("某些情况，我们也需要子组件向父组件传递消息，在Vue中是通过自定义事件完成的；在React中同样是通过"),e("code",[n._v("props")]),n._v("传递消息，只是让父组件给子组件传递一个回调函数，在子组件中调用这个函数即可。")]),n._v(" "),e("p",[n._v("这边还是使用计数器的例子，不过这次将计数器进行拆解，将按钮封装到子组件"),e("code",[n._v("CounterButton")]),n._v("中，"),e("code",[n._v("CounterButton")]),n._v("发生点击事件，将内容传递到父组件中，修改"),e("code",[n._v("counter")]),n._v("的值。")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <button onClick={() => this.props.increment(-1)}>-1</button>\n    );\n  }\n}\n\nexport default class Com04 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0\n    };\n  }\n\n  increment(count) {\n    this.setState({\n      counter: this.state.counter + count\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Counter: {this.state.counter}</h2>\n        <CounterButton increment={this.increment.bind(this)}/>\n        <button onClick={() => this.increment(1)}>+1</button>\n      </div>\n    )\n  }\n}\n")])])]),e("h3",{attrs:{id:"组件间通信练习案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件间通信练习案例"}},[n._v("#")]),n._v(" 组件间通信练习案例")]),n._v(" "),e("p",[n._v("一个Tab切换案例，效果如下：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B520.gif",alt:"111332211"}})]),n._v(" "),e("p",[n._v("具体代码如下：")]),n._v(" "),e("p",[e("code",[n._v("App.js")]),n._v("实现：")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\nimport TabControl from './TabControl';\nimport './style.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      titles: ['流行', '精选', '新款'],\n      currentIndex: 0\n    };\n  }\n\n  render() {\n    const { titles, currentIndex } = this.state;\n \n    return (\n      <div>\n        <TabControl itemClick={this.itemClick.bind(this)} titles={['流行', '精选', '新款']}/>   \n        <h2>{titles[currentIndex]}</h2>\n      </div>\n    )\n  }\n\n  itemClick(index) {\n    this.setState({\n      currentIndex: index\n    });\n  }\n}\n")])])]),e("p",[e("code",[n._v("TabControl.js")]),n._v("实现：")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class TabControl extends Component {\n  static propTypes = {\n    titles: PropTypes.array.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentIndex: 0\n    }\n  }\n\n  render() {\n    const { currentIndex } = this.state;\n\n    return (\n      <div className=\"tab-control\">\n        {\n          this.props.titles.map((item, index) => {\n            return (\n              <div \n                key={index}\n                className={`tab-item ${index == currentIndex ? 'active' : ''}`} \n                onClick={e => this.itemClick(index)}\n              >\n                {item}\n              </div>\n            );\n          })\n        }\n      </div>\n    )\n  }\n\n  itemClick(index) { \n    this.setState({\n      currentIndex: index\n    });\n\n    this.props.itemClick(index);\n  }\n}\n")])])]),e("p",[e("code",[n._v("style.css")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v(".tab-control {\n  display: flex;\n  justify-content: space-between;\n  width: 200px;\n}\n\n.tab-control .tab-item {\n  margin-top: 10px;\n  cursor: pointer;\n}\n\n.tab-control .active {\n  color: red;\n  border-bottom: 1px solid red;\n}\n")])])]),e("h3",{attrs:{id:"react实现slot"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react实现slot"}},[n._v("#")]),n._v(" React实现slot")]),n._v(" "),e("p",[n._v("Vue 实现了一套内容分发的 API，将 "),e("code",[n._v("<slot>")]),n._v(" 元素作为承载分发内容的出口。")]),n._v(" "),e("p",[n._v("在React中，实现Vue的插槽功能很简单，这也是得益于JSX语法的灵活性。")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B521.gif",alt:"image-20210109231454105"}})]),n._v(" "),e("p",[n._v("如上图中的导航栏NavBar，如果进行组件封装，我们可能会封装三个不同的组件，但是，如果类似的组件如果有20个甚至更多，那么一个个地进行组件封装显然是不明智的选择。")]),n._v(" "),e("p",[n._v("更好地做法，可能是再找出组件的相似之处，对外层进行封装，而内部具体要放的内容，可以根据预留的Slot业务需求进行开发。")]),n._v(" "),e("p",[n._v("下面是一种实现方法：")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B522.png",alt:"image-20210109233003357"}})]),n._v(" "),e("p",[e("code",[n._v("NavBar.js")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import React, { Component } from \'react\';\n\nexport default class NavBar extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    return (\n      <div className="nav-bar">\n        <div className="nav-item nav-left">{this.props.children[0]}</div>\n        <div className="nav-item nav-middle">{this.props.children[1]}</div>\n        <div className="nav-item nav-right">{this.props.children[2]}</div>\n      </div>\n    )\n  }\n}\n\n')])])]),e("p",[e("code",[n._v("App.js")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\nimport NavBar from './NavBar';\nimport './style.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <NavBar>\n        <span>left</span>\n        <strong>middle</strong>\n        <span>right</span>\n      </NavBar>\n    )\n  }\n}\n")])])]),e("p",[e("code",[n._v("style.css")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v(".nav-bar {\n  display: flex;\n  justify-content: space-between;\n  width: 300px;\n  height: 30px;\n  display: flex;\n}\n\n.nav-item {\n  line-height: 30px;\n  text-align: center;\n}\n\n.nav-bar .nav-left {\n  width: 50px;\n  background: blue;\n}\n\n.nav-bar .nav-middle {\n  flex: 1;\n  background: red;\n}\n\n.nav-bar .nav-right {\n  width: 60px;\n  background: green;\n}\n")])])]),e("p",[n._v("上面的实现存在的一个缺点就是，"),e("code",[n._v("children")]),n._v("的顺序不能乱。")]),n._v(" "),e("p",[n._v("所以推荐的做法如下：")]),n._v(" "),e("p",[e("code",[n._v("App.js")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\nimport NavBar from './NavBar';\nimport NavBar2 from './NavBar2';\nimport './style.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <NavBar2\n        leftSlot={<span>left</span>}\n        middleSlot={<strong>middle</strong>}\n        rightSlot={<span>right</span>}\n        />\n    )\n  }\n}\n")])])]),e("p",[e("code",[n._v("NavBar2.js")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('import React, { Component } from \'react\';\n\nexport default class NavBar2 extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className="nav-bar">\n        <div className="nav-item nav-left">{this.props.leftSlot}</div>\n        <div className="nav-item nav-middle">{this.props.middleSlot}</div>\n        <div className="nav-item nav-right">{this.props.rightSlot}</div>\n      </div>\n    )\n  }\n}\n')])])]),e("p",[n._v("这样，我们就不需要再关注传递顺序了。")]),n._v(" "),e("h3",{attrs:{id:"跨组件通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨组件通信"}},[n._v("#")]),n._v(" 跨组件通信")]),n._v(" "),e("p",[n._v("在开发中，比较常见的数据传递方式是通过props属性自上而下（由父到子）进行传递。但是对于有一些场景：比如一些数据需要在多个组件中进行共享（地区偏好、UI主题、用户登录状态、用户信息等）。")]),n._v(" "),e("p",[n._v("如果我们在顶层的App中定义这些信息，之后一层层传递下去，那么对于一些中间层不需要数据的组件来说，是一种冗余的操作。")]),n._v(" "),e("h4",{attrs:{id:"使用props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用props"}},[n._v("#")]),n._v(" 使用props")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\n\nfunction ProfileHeader(props) {\n  return (\n    <div>\n      <h2>昵称：{props.nickname}</h2>\n      <h2>等级：{props.level}</h2>\n    </div>\n  );\n}\n\nfunction Profile(props) {\n  return (\n    <div>\n      <ProfileHeader nickname={props.nickname} level={props.level} />\n      <ul>\n        <li>设置1</li>\n        <li>设置2</li>\n        <li>设置3</li>\n        <li>设置4</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Profile nickname={'ccbean'} level={99} />\n      </div>\n    )\n  }\n}\n")])])]),e("p",[n._v("上面的例子，如果我们通过"),e("code",[n._v("props")]),n._v("进行传递，"),e("code",[n._v("<ProfileHeader/>")]),n._v("需要的数据，要首先传递到"),e("code",[n._v("<Profile/>")]),n._v("中，然后再传递到数据真正使用的组件")]),n._v(" "),e("p",[n._v("存在两个问题：")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("数据在"),e("code",[n._v("Profile")]),n._v("中没有任何用处，但是还需要传递；假如嵌套层数更多，那么就需要一层层进行传递；")])]),n._v(" "),e("li",[e("p",[n._v("每个需要传递的属性都要一个个明确传递。这个问题的解决是，使用"),e("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/jsx-in-depth.html#spread-attributes",target:"_blank",rel:"noopener noreferrer"}},[n._v("属性展开"),e("OutboundLink")],1),n._v("；")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<ProfileHeader {...props} />\n")])])]),e("p",[n._v("但容易出现的问题是，将不必要的 props 传递给不相关的组件。")])])]),n._v(" "),e("h4",{attrs:{id:"使用context"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用context"}},[n._v("#")]),n._v(" 使用context")]),n._v(" "),e("blockquote",[e("p",[n._v("https://zh-hans.reactjs.org/docs/context.html")])]),n._v(" "),e("p",[n._v("React中提供了一个API是"),e("code",[n._v("Context")]),n._v("，"),e("code",[n._v("Context")]),n._v("提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递"),e("code",[n._v("props")]),n._v("；")]),n._v(" "),e("p",[e("code",[n._v("Context")]),n._v("设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。")]),n._v(" "),e("h5",{attrs:{id:"相关api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关api"}},[n._v("#")]),n._v(" 相关API")]),n._v(" "),e("p",[e("code",[n._v("React.createContext")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const MyContext = React.createContext(defaultValue);\n")])])]),e("ul",[e("li",[n._v("创建一个需要共享的"),e("code",[n._v("Context")]),n._v("对象")]),n._v(" "),e("li",[n._v("如果一个组件订阅"),e("code",[n._v("Context")]),n._v("，那么这个组件会从离自身最近的那个匹配的"),e("code",[n._v("Provider")]),n._v("中读取到当前的"),e("code",[n._v("context")]),n._v("值")]),n._v(" "),e("li",[e("code",[n._v("defaultValue")]),n._v("是组件在顶层查找过程中没有找到对应的Provider，那么就使用默认值。")])]),n._v(" "),e("p",[e("code",[n._v("Context.Provider")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<MyContext.Provider value={/* 某个值 */}>\n")])])]),e("ul",[e("li",[n._v("每个"),e("code",[n._v("Context")]),n._v("对象都会返回一个"),e("code",[n._v("Provider React")]),n._v(" 组件，它允许消费组件订阅"),e("code",[n._v("context")]),n._v("的变化")]),n._v(" "),e("li",[e("code",[n._v("Provider")]),n._v("接收一个"),e("code",[n._v("value")]),n._v("属性，传递给消费组件")]),n._v(" "),e("li",[n._v("一个"),e("code",[n._v("Provider")]),n._v("可以和多个消费组件有对应关系")]),n._v(" "),e("li",[n._v("多个"),e("code",[n._v("Provider")]),n._v("也可以嵌套使用，里层的会覆盖外层的数据")]),n._v(" "),e("li",[n._v("当"),e("code",[n._v("Provider")]),n._v("的"),e("code",[n._v("value")]),n._v("值发生变化时，它内部的所有消费组件都会重新渲染")])]),n._v(" "),e("p",[e("code",[n._v("Class.ContextType")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("MyClass.contentType = MyContext;\n")])])]),e("ul",[e("li",[n._v("挂载在"),e("code",[n._v("class")]),n._v("上的"),e("code",[n._v("contextType")]),n._v("属性会被重赋值为一个由"),e("code",[n._v("React.createContext()")]),n._v("创建的"),e("code",[n._v("Context")]),n._v(" 对象，这能让你使用"),e("code",[n._v("this.context")]),n._v("来消费最近 "),e("code",[n._v("Context")]),n._v("上的那个值，你可以在任何生命周期中访问到它，包括"),e("code",[n._v("render")]),n._v("函数中。")])]),n._v(" "),e("p",[e("code",[n._v("Context.Consumber")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<MyContext.Consumer>\n  {value => /* 基于 context 值进行渲染*/}\n</MyContext.Consumer>\n")])])]),e("ul",[e("li",[n._v("React 组件也可以订阅到"),e("code",[n._v("context")]),n._v("变更。这能让你在函数式组件中完成订阅"),e("code",[n._v("context")])]),n._v(" "),e("li",[n._v("这种方法需要一个"),e("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/render-props.html#using-props-other-than-render",target:"_blank",rel:"noopener noreferrer"}},[n._v("函数作为子元素（function as a child）"),e("OutboundLink")],1)]),n._v(" "),e("li",[n._v("这个函数接收当前的"),e("code",[n._v("context")]),n._v("值，返回一个 "),e("code",[n._v("React")]),n._v("节点")])]),n._v(" "),e("h5",{attrs:{id:"实现通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现通信"}},[n._v("#")]),n._v(" 实现通信")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/ccbeango/blogImages/React/React%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B523.png",alt:"image-20210110110412680"}})]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\n\n// 1. 创建Context对象\nconst UserContext = React.createContext({\n  nickname: 'aaa',\n  level: -1\n});\n\nclass ProfileHeader extends Component {\n  // 3. 将context对象赋值给应用数据组件\n  static contextType = UserContext\n\n  render() {\n    return (\n      <div>\n        <h2>昵称：{this.context.nickname}</h2>\n        <h2>等级：{this.context.level}</h2>\n      </div>\n    )\n  }\n}\n\nfunction Profile(props) {\n  return (\n    <div>\n      <ProfileHeader />\n      <ul>\n        <li>设置1</li>\n        <li>设置2</li>\n        <li>设置3</li>\n        <li>设置4</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nickname: 'ccbean',\n      level: 99\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        {/* 2.使用Provider包裹 */}\n        <UserContext.Provider value={this.state}>\n          <Profile />\n        </UserContext.Provider>\n        <Profile />\n      </div>\n    )\n  }\n}\n")])])]),e("p",[n._v("我们可以看到，如果"),e("code",[n._v("<Profile />")]),n._v("没有在"),e("code",[n._v("<UserContext.Provider/>")]),n._v("包裹时，使用了"),e("code",[n._v("React.createContext")]),n._v("中的默认值"),e("code",[n._v("aaa")]),n._v("和"),e("code",[n._v("-1")]),n._v("。")]),n._v(" "),e("p",[n._v("在函数组件中，如何使用"),e("code",[n._v("context")]),n._v("呢？使用"),e("code",[n._v("Context.Consumer")]),n._v("即可在函数式组件中订阅"),e("code",[n._v("Context")])]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\n\nconst UserContext = React.createContext({\n  nickname: 'aaa',\n  level: -1\n});\n\nfunction ProfileHeader() {\n  return (\n    <UserContext.Consumer>\n      {\n        value => {\n          return (\n            <div>\n              <h2>昵称：{value.nickname}</h2>\n              <h2>等级：{value.level}</h2>\n            </div>\n          )\n        }\n      }\n    </UserContext.Consumer>\n  )\n}\n\nfunction Profile(props) {\n  return (\n    <div>\n      <ProfileHeader />\n      <ul>\n        <li>设置1</li>\n        <li>设置2</li>\n        <li>设置3</li>\n        <li>设置4</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nickname: 'ccbean',\n      level: 99\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <UserContext.Provider value={this.state}>\n          <Profile />\n        </UserContext.Provider>\n      </div>\n    )\n  }\n}\n")])])]),e("p",[n._v("如果是多个context，那么需要这样写：")]),n._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import React, { Component } from 'react';\n\nconst UserContext = React.createContext({\n  nickname: 'aaa',\n  level: -1\n});\n\nconst ThemeContext = React.createContext({\n  color: 'black'\n});\n\nfunction ProfileHeader() {\n  return (\n    <UserContext.Consumer>\n      {\n        value => {\n          return (\n            <ThemeContext.Consumer>\n              {\n                theme => {\n                  return (\n                    <div>\n                      <h2>昵称：{value.nickname}</h2>\n                      <h2>等级：{value.level}</h2>\n                      <h2>主题：{theme.color}</h2>\n                    </div>\n                  );\n                }\n              }\n            </ThemeContext.Consumer>\n          )\n        }\n      }\n    </UserContext.Consumer>\n  )\n}\n\nfunction Profile(props) {\n  return (\n    <div>\n      <ProfileHeader />\n      <ul>\n        <li>设置1</li>\n        <li>设置2</li>\n        <li>设置3</li>\n        <li>设置4</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nickname: 'ccbean',\n      level: 99\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <UserContext.Provider value={this.state}>\n          <ThemeContext.Provider value={{ color: 'red' }}>\n            <Profile />\n          </ThemeContext.Provider>\n        </UserContext.Provider>\n      </div>\n    )\n  }\n}\n")])])]),e("p",[n._v("上面的代码，添加"),e("code",[n._v("ThemeContext")]),n._v("，那么ProfileHeader中嵌套了两层，代码看起来十分混乱。")]),n._v(" "),e("p",[n._v("实际开发中，我们一般不会这么做，会有其它更好的解决方案，如考虑另外创建你自己的渲染组件，以提供这些值；或者使用"),e("code",[n._v("redux")]),n._v("等。")])])}),[],!1,null,null,null);e.default=r.exports}}]);