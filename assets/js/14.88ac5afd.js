(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{330:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"精通正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#精通正则表达式"}},[t._v("#")]),t._v(" 精通正则表达式")]),t._v(" "),s("p",[t._v("本书的目的不是提供具体问题的解决办法，而是教会读者利用正则表达式来思考，解决遇到的各种问题。")]),t._v(" "),s("p",[s("strong",[t._v("正则表达式不是死板的教条，它更像是门艺术。")])]),t._v(" "),s("h2",{attrs:{id:"第1章-正则表达式入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第1章-正则表达式入门"}},[t._v("#")]),t._v(" 第1章 正则表达式入门")]),t._v(" "),s("h3",{attrs:{id:"什么是正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是正则表达式"}},[t._v("#")]),t._v(" 什么是正则表达式")]),t._v(" "),s("p",[t._v("完整的正则表达式由两种字符构成：特殊字符，如元字符"),s("code",[t._v("*")]),t._v("  和 普通文本字符。")]),t._v(" "),s("p",[t._v("类比日常语言，普通字符对应单词，特殊字符对应的就是语法。根据语言规则，按照语法把单词组合起来，就会得到能传达思想的文本。")]),t._v(" "),s("p",[t._v("完整的正则表达式由小的构建模块单元（building block unit）组成，每个单独的构建模块都很简单，不过因为它们能够以无穷多种方式组合，将它们结合起来实现特殊目标必须依靠经验。")]),t._v(" "),s("h3",{attrs:{id:"行的起始-和-结束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#行的起始-和-结束"}},[t._v("#")]),t._v(" 行的起始^和 结束$")]),t._v(" "),s("p",[t._v("脱字符号"),s("code",[t._v("^")]),t._v("代表一行的开始； 美元符号"),s("code",[t._v("$")]),t._v("代表一行的结束。")]),t._v(" "),s("p",[t._v("脱字符号"),s("code",[t._v("^")]),t._v("和美元符号"),s("code",[t._v("$")]),t._v("的特别之处就在于，"),s("strong",[t._v("它们匹配的是一个位置，而不是具体的文本。")])]),t._v(" "),s("p",[t._v("最好能养成按照字符来理解正则表达式的习惯：")]),t._v(" "),s("ul",[s("li",[t._v("不要这样："),s("code",[t._v("^cat")]),t._v("匹配以cat开头的行")]),t._v(" "),s("li",[t._v("而要按照字符解读："),s("strong",[s("code",[t._v("^cat")]),t._v("匹配的是以 c 作为一行的第一个字符，紧接一个 a，紧接一个 t 的文本。")])])]),t._v(" "),s("p",[t._v("这两种理解的结果并无差异，但按照字符来解读更易于明白新遇到的正则表达式的内部逻辑。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.staticaly.com/gh/ccbeango/blogImages@master/%E7%B2%BE%E9%80%9ARegex/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1-01.png",alt:"精通正则表达式1-01"}})]),t._v(" "),s("h3",{attrs:{id:"字符组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符组"}},[t._v("#")]),t._v(" 字符组 [ ]")]),t._v(" "),s("p",[t._v("字符组的表达式为"),s("code",[t._v("[...]")]),t._v("，它的作用是列出在某处期望匹配的字符。")]),t._v(" "),s("p",[s("strong",[t._v("例子：搜索单词"),s("code",[t._v("grey")]),t._v("或"),s("code",[t._v("gray")])])]),t._v(" "),s("p",[s("code",[t._v("[ea]")]),t._v("能够匹配到"),s("code",[t._v("a")]),t._v("或"),s("code",[t._v("e")]),t._v("，所以"),s("code",[t._v("/gr[ea]y/")]),t._v("就是先找到g，跟着是一个r，然后是\n一个a或者e，最后是一个y。")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("ul",[s("li",[t._v("在字符组以外，普通字符（例如"),s("code",[t._v("/gr[ae]y/")]),t._v("中的 g 和 r）都有"),s("strong",[t._v("接下来是")]),t._v("（and then）的意思，首先匹配 g，接下来是 r ······")]),t._v(" "),s("li",[t._v("在字符组内部，情况完全相反，字符组的内容是在"),s("strong",[t._v("同一个位置")]),t._v("能够匹配的若干字符，它的意思是"),s("strong",[t._v("或")])])]),t._v(" "),s("h4",{attrs:{id:"连字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连字符"}},[t._v("#")]),t._v(" 连字符")]),t._v(" "),s("p",[t._v("在"),s("strong",[t._v("字符组内部")]),t._v("，连字符"),s("code",[t._v("-")]),t._v("表示一个范围，而且允许多重范围，也允许随意组合字符范围和普通文本：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("[0-9]")]),t._v("、"),s("code",[t._v("[a-z]")]),t._v("：匹配"),s("strong",[t._v("一个")]),t._v("数字、匹配"),s("strong",[t._v("一个")]),t._v("小写字母")]),t._v(" "),s("li",[s("code",[t._v("[0-9a-fA-F]")]),t._v("：匹配"),s("strong",[t._v("一个")]),t._v("数字、小写字母 a 到 f或大写字母 A 到 F 。顺序无所谓，即等价于"),s("code",[t._v("[A-Fa-f0-9]")])]),t._v(" "),s("li",[s("code",[t._v("[0-9A-Z_!.?]")]),t._v("：匹配"),s("strong",[t._v("一个")]),t._v("数字、大写字母、下画线、惊叹号、点号，或问号")]),t._v(" "),s("li",[t._v("字符组开头的连字符只是一个普通的连字符号")])]),t._v(" "),s("p",[t._v("在字符组内部，真正的特殊字符是连字符，在字符组外部的特殊字符在内部仅是普通字符。"),s("strong",[t._v("可以把字符组看作独立的微型语言。在字符组内部和外部，关于元字符的规定（哪些是元字符，以及它们的意义）是不同的")])]),t._v(" "),s("h4",{attrs:{id:"排除型字符组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排除型字符组"}},[t._v("#")]),t._v(" 排除型字符组")]),t._v(" "),s("p",[t._v("排除型字符组的表达式为"),s("code",[t._v("[^...]")]),t._v("，这个字符组匹配任何未列出的字符，也就是这里列出的是不希望匹配的字符。")]),t._v(" "),s("p",[s("strong",[t._v("脱字符号"),s("code",[t._v("^")]),t._v("必须在第一个方括号之后，表示排除，否则它只是一个普通字符。")])]),t._v(" "),s("p",[t._v("例子：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("[^1-6]")]),t._v(" 匹配1到6以外的任何字符")]),t._v(" "),s("li",[s("code",[t._v("q[^u]")]),t._v(" 匹配字母 q 后面字母不是 u\n"),s("ul",[s("li",[t._v("可以匹配到单词Iraqi、qasida")]),t._v(" "),s("li",[t._v("不可以匹配单词Iraq，"),s("strong",[t._v("因为一个字符组，即使是排除型字符组，也要匹配一个字符")]),t._v("。如果Iraq后面又空格或者换行符，也可以匹配到。")])])])]),t._v(" "),s("p",[t._v("请记住，排除型字符组表示："),s("strong",[t._v("匹配一个未列出的字符，而不是不要匹配列出的字符。（match a character that's not listed，don't match what is listed）")])]),t._v(" "),s("h3",{attrs:{id:"任意字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任意字符"}},[t._v("#")]),t._v(" 任意字符 .")]),t._v(" "),s("p",[t._v("点号"),s("code",[t._v(".")]),t._v("用来匹配一个任意字符。它是用来匹配任意字符的字符组的简写。")]),t._v(" "),s("p",[t._v("例子：搜索03/19/76、03-19-76或者03.19.76")]),t._v(" "),s("p",[t._v("这里，可以用一个明确的字符组"),s("code",[t._v("[-./]")]),t._v("来匹配，也可以使用点号"),s("code",[t._v(".")]),t._v("来匹配")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'03/19/76 03-19-76 03.19.76'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("03[-./]19[-./]76")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// match1：['03/19/76', '03-19-76', '03.19.76']")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("03.19.76")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// match2：['03/19/76', '03-19-76', '03.19.76']")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("方法一更准确。方法二还可以匹配到"),s("code",[t._v("03x19y76")]),t._v("或"),s("code",[t._v("19 203319 7639")]),t._v("等很多其它结果。")]),t._v(" "),s("p",[t._v("那么应该如何选择？取决于你对需要检索文本的了解，以及你需要达到的准确程度。")]),t._v(" "),s("p",[t._v("一个重要但常见的问题是，"),s("strong",[t._v("写正则表达式时，我们需要在对欲检索文本的了解程度与检索精确性之间求得平衡")]),t._v("。例如，如果我们知道，针对某个检索文本，"),s("code",[t._v("/03.19.76/g")]),t._v("这个正则表达式基本不可能匹配不期望的结果，那么使用它就是合理的。要想正确使用正则表达式，清楚地了解目标文本是非常重要的。")]),t._v(" "),s("h3",{attrs:{id:"多选结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多选结构"}},[t._v("#")]),t._v(" 多选结构 |")]),t._v(" "),s("p",[t._v("竖杠"),s("code",[t._v("|")]),t._v("表示或，可以用它将把不同的子表达式组合成一个总的表达式，而这个总的表达式又能匹配任意的子表达式。")]),t._v(" "),s("p",[s("code",[t._v("Rob")]),t._v("和"),s("code",[t._v("Robert")]),t._v("是两个子表达式，"),s("code",[t._v("Rob|Robert")]),t._v("就可以匹配其中任意一个正则表达式。在这样的组合中，子表达式被称为"),s("strong",[t._v("多选分支")]),t._v("（alternative）。")]),t._v(" "),s("p",[s("strong",[t._v("例子：搜索单词"),s("code",[t._v("grey")]),t._v("或"),s("code",[t._v("gray")])])]),t._v(" "),s("p",[t._v("字符组方法："),s("code",[t._v("/gr[ea]y/")])]),t._v(" "),s("p",[t._v("多选结构：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("/grey|gray/")])]),t._v(" "),s("li",[t._v("或使用括号 "),s("code",[t._v("/gr(a|e)y/")]),t._v("。")])]),t._v(" "),s("p",[t._v("**括号可以用来界定元字符的作用范围。**多选结构可以包括很多字符，但不能超越括号的界限。")]),t._v(" "),s("p",[t._v("其它例子：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("/(First|1st) [Ss]treet/")]),t._v("，都是"),s("code",[t._v("st")]),t._v("结尾，也可以把前面部分改成"),s("code",[t._v("/(Fir|1)st/")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'First Street | First street | 1st Street | 1st street'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(First|1st) [Ss]treet")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(Fir|1)st [Ss]treet")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("^(From|Subject|Date):")]),t._v("，匹配以From：Subject：或者Date：开头的文本行")])])]),t._v(" "),s("h3",{attrs:{id:"可选项元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可选项元素"}},[t._v("#")]),t._v(" 可选项元素 ?")]),t._v(" "),s("p",[t._v("问号"),s("code",[t._v("?")]),t._v("表示之前紧邻的元素出现零次或一次。")]),t._v(" "),s("p",[s("strong",[t._v("例子：匹配7月4日，其中月份可写为July或Jul，日子可写为fourth、4th、4")])]),t._v(" "),s("p",[t._v("正则表达式："),s("code",[t._v("/July? (fourth|4(th)?)/")]),t._v("，"),s("strong",[t._v("括号用于界定元字符的作用范围")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'July 4th | July fourth | July 4 | Jul 4th |  Jul 4'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("July? (fourth|4(th)?)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"重复出现元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重复出现元素"}},[t._v("#")]),t._v(" 重复出现元素 + *")]),t._v(" "),s("p",[t._v("加号"),s("code",[t._v("+")]),t._v("表示之前紧邻的元素出现一次或多次。")]),t._v(" "),s("p",[t._v("星号"),s("code",[t._v("*")]),t._v("表示之前紧邻的元素出现任意多次，或者不出现。")]),t._v(" "),s("p",[s("strong",[t._v("例子：匹配HR标签，并且可设置SIZE")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<HR SIZE=14> <HR SIZE = 14 > <HR SIZE= 14    >'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("<HR +SIZE *= *[0-9]+ *>")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("使用空格加加号"),s("code",[t._v("/ +/")]),t._v("来匹配HR和SIZE之间的一个空格，空格加星号"),s("code",[t._v("/ */")]),t._v("来匹配后面位置的任意多个空格。")])]),t._v(" "),s("h3",{attrs:{id:"量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),s("p",[s("strong",[t._v("问号、加号、星号这三个元字符统称为量词。因为它们限定了所作用元素的匹配次数。")])]),t._v(" "),s("p",[t._v("每个量词都规定了匹配成功至少需要的次数下限，以及尝试匹配的次数上\n限。对某些量词来说，下限是0，对某些量词来说，上限是无穷大。")]),t._v(" "),s("p",[t._v("这里还有一种量词是区间量词，它能够使用元字符序列来自定义重复次数的区间，语法为"),s("code",[t._v("...{min,max}")]),t._v("，如"),s("code",[t._v("...{3, 12}")]),t._v("表示能够容许前面的元素重现次数在3到12之间。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("量词")]),t._v(" "),s("th",[t._v("次数下限")]),t._v(" "),s("th",[t._v("次数上限")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("?")]),t._v(" "),s("td",[t._v("无")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("单次可选")])]),t._v(" "),s("tr",[s("td",[t._v("*")]),t._v(" "),s("td",[t._v("无")]),t._v(" "),s("td",[t._v("无")]),t._v(" "),s("td",[t._v("任意次数均可")])]),t._v(" "),s("tr",[s("td",[t._v("+")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("无")]),t._v(" "),s("td",[t._v("至少一次")])]),t._v(" "),s("tr",[s("td",[t._v("{min, max}")]),t._v(" "),s("td",[t._v("min")]),t._v(" "),s("td",[t._v("max")]),t._v(" "),s("td",[t._v("出现min到max次")])])])]),t._v(" "),s("h3",{attrs:{id:"括号及反向引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#括号及反向引用"}},[t._v("#")]),t._v(" 括号及反向引用")]),t._v(" "),s("p",[t._v("括号有两种用途：")]),t._v(" "),s("ul",[s("li",[t._v("第一种是上面提到的，"),s("strong",[t._v("界定元字符的作用范围")])]),t._v(" "),s("li",[t._v("第二种是"),s("strong",[t._v("记住它们包含的子表达式匹配的文本")]),t._v("，称为"),s("strong",[t._v("捕获")]),t._v("，然后可以用"),s("strong",[t._v("反向引用")]),t._v("来调用捕获到的值。")])]),t._v(" "),s("p",[t._v("反向引用是正则表达式的特性之一，它允许我们"),s("strong",[t._v("匹配与表达式先前部分匹配的同样文本")]),t._v("。也就是允许我们调用之前捕获到的值。")]),t._v(" "),s("p",[t._v("在一个表达式中我们可以使用多个括号。再用"),s("code",[t._v("\\1")]),t._v("、"),s("code",[t._v("\\2")]),t._v("、"),s("code",[t._v("\\3")]),t._v("等来表示第一、第二、第三组括号匹配的文本。括号是按照开括号"),s("code",[t._v("(")]),t._v("从左至右的出现顺序进行\n的，所以"),s("code",[t._v("/([a-z])(0-9)\\1\\2")]),t._v("中的"),s("code",[t._v("\\1")]),t._v("代表"),s("code",[t._v("[a-z]")]),t._v("匹配的内容，而"),s("code",[t._v("\\2")]),t._v("代表"),s("code",[t._v("[0-9]")]),t._v("匹配的内容。")]),t._v(" "),s("p",[s("strong",[t._v("例子：查询重复的单词正则")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello hello world, this is a test test, not the theory'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b([a-z]+) +\\1\\b")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("ig")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"转义符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转义符"}},[t._v("#")]),t._v(" 转义符")]),t._v(" "),s("p",[t._v("在字符组外部，使用斜杠加元字符时，如"),s("code",[t._v("\\.")]),t._v("，斜杠"),s("code",[t._v("\\")]),t._v("表示转义符，它作用的元字符会失去而特殊含义，成为普通字符。")]),t._v(" "),s("p",[t._v("特殊的元字符包括："),s("code",[t._v("( [ { \\ ^ $ | ) ] } ? * + .")])]),t._v(" "),s("h3",{attrs:{id:"理解子表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解子表达式"}},[t._v("#")]),t._v(" 理解子表达式")]),t._v(" "),s("p",[t._v("子表达式指的是整个正则表达式中的一部分，通常是括号内的表达式，或者是由"),s("code",[t._v("|")]),t._v("分隔的多选分支。")]),t._v(" "),s("p",[t._v("例如，在"),s("code",[t._v("^(Subject|Date):")]),t._v("中，"),s("code",[t._v("Subject|Date")]),t._v("通常被视为一个子表达式。其中的"),s("code",[t._v("Subject")]),t._v("和"),s("code",[t._v("Date")]),t._v("也算得上子表达式。而且，严格说起来，"),s("code",[t._v("S")]),t._v("、"),s("code",[t._v("u")]),t._v("、"),s("code",[t._v("b")]),t._v("、"),s("code",[t._v("j")]),t._v("这些字符，都算子表达式。"),s("code",[t._v("1-6")]),t._v("这样的字符序列并不能算"),s("code",[t._v("H[1-6] *")]),t._v("的子表达式，因为"),s("code",[t._v("1-6")]),t._v("所属的字符组是不可分割的"),s("strong",[t._v("单元（unit）")]),t._v("。但是，"),s("code",[t._v("H")]),t._v("、"),s("code",[t._v("[1-6]")]),t._v("、"),s("code",[t._v("·＊")]),t._v("都是"),s("code",[t._v("H[1-6]·*")]),t._v("的子表达式。")]),t._v(" "),s("p",[t._v("与多选分支不同的是，量词（星号、加号和问号）作用的对象是它们之前紧邻的子表达式。所以"),s("code",[t._v("mis+pell")]),t._v("中的"),s("code",[t._v("+")]),t._v("作用的是"),s("code",[t._v("s")]),t._v("，而不是"),s("code",[t._v("mis")]),t._v("或者"),s("code",[t._v("is")]),t._v("。当然，如果量词之前紧邻的是一个括号包围的子表达式，整个子表达式（无论多复杂）都被视为一个单元。")]),t._v(" "),s("h3",{attrs:{id:"更多的例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更多的例子"}},[t._v("#")]),t._v(" 更多的例子")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("匹配程序中的标识符：标识符只包含字母、数字以及下划线，但不能以数字开头。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[a-zA-Z_][a-zA-Z_0-9]*")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果标识符长度有限制，如最长32个字符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[a-zA-Z_][a-zA-Z_0-9]{0,31}")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("匹配引号内的字符串。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 用[^"]匹配除双引号之外的任何字符')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v('"[^"]*"')]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("匹配美元金额，可能包含小数")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Shirts $9.45, pants $12, shoes $20'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\$[0-9]+(\\.[0-9][0-9])?")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("匹配时间，12小时制，如"),s("code",[t._v("09:17 am")]),t._v("、"),s("code",[t._v("12:30 pm")]),t._v("，避免匹配不正确时间，如"),s("code",[t._v("99:33 am")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'09:17 am 12:30 pm 99:33 am'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(1[012]|0[1-9]):[0-5][0-9] (am|pm)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("匹配时间，24小时制，如"),s("code",[t._v("18:17")]),t._v("、"),s("code",[t._v("09:45")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.staticaly.com/gh/ccbeango/blogImages@master/%E7%B2%BE%E9%80%9ARegex/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1-02.png.png",alt:"精通正则表达式1-02"}})])])]),t._v(" "),s("h2",{attrs:{id:"第二章-入门示例拓展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二章-入门示例拓展"}},[t._v("#")]),t._v(" 第二章 入门示例拓展")]),t._v(" "),s("h3",{attrs:{id:"匹配正负号的浮点数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配正负号的浮点数"}},[t._v("#")]),t._v(" 匹配正负号的浮点数")]),t._v(" "),s("p",[t._v("匹配有正负号的浮点数（正号可省略），小数部分可有可无")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'5.55'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-99'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'-0.23'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+90.9'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[+-]?[0-9]+(\\.[0-9]*)?$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\nstr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ul",[s("li",[t._v("使用"),s("code",[t._v("[+-]?")]),t._v("处理正负号")]),t._v(" "),s("li",[t._v("使用"),s("code",[t._v("(\\.[0-9]*)?")]),t._v("处理小数部分")]),t._v(" "),s("li",[t._v("开头和结尾的"),s("code",[t._v("^...$")]),t._v("不可省略，以保证匹配结果只包含数字")])]),t._v(" "),s("h3",{attrs:{id:"非捕获型括号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非捕获型括号"}},[t._v("#")]),t._v(" 非捕获型括号")]),t._v(" "),s("p",[s("code",[t._v("()")]),t._v("可以用来分组和捕获它包含的子表达式，"),s("code",[t._v("(?:)")]),t._v("只会分组，并不捕获，称为非捕获型括号。")]),t._v(" "),s("p",[t._v("例子，捕获温度和单位。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" temperature "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'39C'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不使用非捕获行括号，CF两端的括号排在第3位，它匹配的文本会保存在$3中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^([+-]?[0-9]+(\\.[0-9]*)?)([CF])$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temperature"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'温度：$1 单位: $3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用非捕获行括号，CF两端的括号虽然排在第3位，但它匹配的文本会保存在$2中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^([+-]?[0-9]+(?:\\.[0-9]*)?)([CF])$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temperature"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'温度：$1 单位: $2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"s的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#s的作用"}},[t._v("#")]),t._v(" \\s的作用")]),t._v(" "),s("p",[t._v('元字符 "\\s" 可以匹配一个空白，包括空格、制表符、换页符和换行符。')]),t._v(" "),s("p",[t._v("通常使用"),s("code",[t._v("\\s*")]),t._v("表示任意多个空白字符。")]),t._v(" "),s("p",[t._v("那么，上面温度的单位之间可以有空格，表示就是")]),t._v(" "),s("p",[s("code",[t._v("/^([+-]?[0-9]+(?:\\.[0-9]*)?)\\s*([CF])$/")])]),t._v(" "),s("p",[t._v("如果C或F接收不区分大小写，可以使用修饰符"),s("code",[t._v("i")]),t._v("，表示就是")]),t._v(" "),s("p",[s("code",[t._v("/^([+-]?[0-9]+(?:\\.[0-9]*)?)\\s*([CF])$/i")])]),t._v(" "),s("p",[t._v("代码如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^([+-]?[0-9]+(?:\\.[0-9]*)?)\\s*([CF])$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" temperature1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'39C'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temperature1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'温度：$1 单位: $2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" temperature2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'39 F'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temperature2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'温度：$1 单位: $2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" temperature3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'39 f'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temperature3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'温度：$1 单位: $2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"修正股票价格"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修正股票价格"}},[t._v("#")]),t._v(" 修正股票价格")]),t._v(" "),s("p",[t._v("修正价格，通常是保留小数点后两位数字，如果第三位不为零，也需要保留，去掉其他的数字。结果就是12.375000000392或者12.375会被修正为“12.375”，而37.500被修正为“37.50”。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\.\\d\\d[1-9]?)\\d*")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12.375000000392'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12.375'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'37.500'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("最开始的"),s("code",[t._v("\\.")]),t._v("匹配小数点。接下来的"),s("code",[t._v("\\d\\d")]),t._v("匹配开头的两位数字，\n"),s("code",[t._v("[1-9]?")]),t._v("」匹配可能跟在后面的非零数字。到这里，任何匹配的文本都是我们希望保留的，所以用括号把它保存到"),s("code",[t._v("$1")]),t._v("中。")]),t._v(" "),s("p",[t._v("之后替换文本可以直接使用"),s("code",[t._v("$1")]),t._v("。末尾的"),s("code",[t._v("\\d*")]),t._v("用来匹配其余的多余数字。")]),t._v(" "),s("h3",{attrs:{id:"环视功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环视功能"}},[t._v("#")]),t._v(" 环视功能")]),t._v(" "),s("p",[t._v("环视与单词分界符"),s("code",[t._v("\\b")]),t._v("、锚点"),s("code",[t._v("^")]),t._v("和"),s("code",[t._v("$")]),t._v("相似，"),s("strong",[t._v("只匹配文本中特定位置，不匹配任何字符")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.staticaly.com/gh/ccbeango/blogImages@master/%E7%B2%BE%E9%80%9ARegex/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1-03.png",alt:"精通正则表达式1-03"}})]),t._v(" "),s("p",[t._v("环视尝试匹配子表达式，在检查子表达式能否匹配的过程中，它们本身不会“占用”任何文本。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...by Jeffrey Friedl.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("Jeffrey")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?=Jeffrey)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// regex 可以匹配到 Jeffrey 本身")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// regex2 匹配到右侧是Jeffrey标记的位置，即Jeffrey左侧")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("code",[t._v("/Jeffrey/")]),t._v("匹配结果：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.staticaly.com/gh/ccbeango/blogImages@master/%E7%B2%BE%E9%80%9ARegex/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1-04.png",alt:"精通正则表达式1-04"}})]),t._v(" "),s("p",[s("code",[t._v("/(?=Jeffrey)/")]),t._v("匹配结果：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.staticaly.com/gh/ccbeango/blogImages@master/%E7%B2%BE%E9%80%9ARegex/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1-05.png",alt:"精通正则表达式1-05"}})]),t._v(" "),s("p",[t._v("顺序环视会检查子表达式能否匹配，但它只寻找能够匹配的位置，而不会真正“占用”这些字符。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...by Jeffrey Friedl.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...by Thomas Jefferson.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?=Jeffrey)Jeff")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 能匹配到Jeff")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不能匹配到Jeff")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'match2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("先匹配到右侧是Jefferey的位置，然后再匹配Jeff；str2中因为没有Jeffrey，而是Jefferson，虽然能匹配到Jeff，但不存在"),s("code",[t._v("(?=Jeffrey)")]),t._v("能匹配的位置，所以整个表达式无法匹配。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.staticaly.com/gh/ccbeango/blogImages@master/%E7%B2%BE%E9%80%9ARegex/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1-06.png",alt:"精通正则表达式1-06"}})]),t._v(" "),s("p",[t._v("把"),s("code",[t._v("Jeffs")]),t._v("替换为"),s("code",[t._v("Jeff's")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jeffs and Jeffs'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\bJeffs\\b")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jeff\'s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'res1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\b(Jeff)(s)\\b")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$1\'$2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'res2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("\\bJeff(?=s\\b)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jeff\'"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'res3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<=\\bJeff)(?=s\\b)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res4 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\'"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'res4'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("方法3："),s("code",[t._v("Jeff")]),t._v("匹配之后，接下来尝试的就是顺序环视。只有当"),s("code",[t._v("s\\b")]),t._v("在此位置能够匹配时（也就是"),s("code",[t._v("Jeff")]),t._v("之后紧跟一个"),s("code",[t._v("s")]),t._v("一个单词分界符）整个表达式才能匹配成功。但是，因为"),s("code",[t._v("s\\b")]),t._v("只是顺序环视子表达式的一部分，所以它匹配的"),s("code",[t._v("s")]),t._v("不属于最终的匹配文本。**记住，"),s("code",[t._v("Jeff")]),t._v("确定匹配文本，而顺序环视只是“选择”一个位置。**在此处使用顺序环视的唯一好处在于，它保证表达式不会匹配任意的情况。或者从另一个角度来说就是，它容许我们在只匹配"),s("code",[t._v("Jeff")]),t._v("之前检查整个"),s("code",[t._v("Jeffs")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.staticaly.com/gh/ccbeango/blogImages@master/%E7%B2%BE%E9%80%9ARegex/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1-07.png",alt:"精通正则表达式1-07"}})]),t._v(" "),s("p",[t._v("方法4： 实际上并没有匹配任何字符，只是匹配了我们希望插入撇号的位置。在这种情况下，我们并没有“替换”任何字符，而只是插入了一个撇号。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.staticaly.com/gh/ccbeango/blogImages@master/%E7%B2%BE%E9%80%9ARegex/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1-08.png",alt:"精通正则表达式1-08"}})]),t._v(" "),s("p",[t._v("评价：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.staticaly.com/gh/ccbeango/blogImages@master/%E7%B2%BE%E9%80%9ARegex/%E7%B2%BE%E9%80%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1-09.png",alt:"精通正则表达式1-09"}})]),t._v(" "),s("h3",{attrs:{id:"环视功能给数值插入逗号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环视功能给数值插入逗号"}},[t._v("#")]),t._v(" 环视功能给数值插入逗号")]),t._v(" "),s("p",[t._v("一句话，The US population is 298444215，对于英语阅读者，"),s("code",[t._v("298,444,215")]),t._v("看起来更自然。")]),t._v(" "),s("p",[t._v("如果手动添加，从左到右，每三个数字，如果左边还有数字的话，就加入一个逗号，但"),s("strong",[t._v("正则表达式一般都是从左向右工作的")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The population of 29844215 is growing'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The US population is 298444215'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(?<=\\d)(?=(?:\\d{3})+\\b)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'res1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('","')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'res2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("首先逆序环视，"),s("code",[t._v("(?<=\\d)")]),t._v("从右到左匹配左边有数字的右侧位置，这时可以匹配到左侧有数字的位置，然后从这个位置再使用顺序环视"),s("code",[t._v("(?=(?:\\d{3})+\\b)")]),t._v("从左到右匹配右边有三个数字，查看这个位置的右侧是否有三个数字，如果有，就插入一个逗号。")]),t._v(" "),s("p",[t._v("表达式中还使用了非捕获型括号"),s("code",[t._v("(?:\\d{}3)")]),t._v("，这样做的好处在于，见到这个正则表达式的人不会担\n心与捕获型括号关联的"),s("code",[t._v("$1")]),t._v("是否会被用到；而且它的效率更高，因为引擎不需要记忆捕获的文本。")]),t._v(" "),s("h2",{attrs:{id:"第三章-正则表达式的特性和流派概览"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三章-正则表达式的特性和流派概览"}},[t._v("#")]),t._v(" 第三章 正则表达式的特性和流派概览")]),t._v(" "),s("h3",{attrs:{id:"程序中处理正则表达式的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序中处理正则表达式的方式"}},[t._v("#")]),t._v(" 程序中处理正则表达式的方式")]),t._v(" "),s("p",[t._v("一般来说，程序设计语言有3 种处理正则表达式的方式：")]),t._v(" "),s("ol",[s("li",[t._v("集成式（integrated）：正则表达式是直接内建在语言之中的，Perl就是如此。")]),t._v(" "),s("li",[t._v("程序式（procedural）和面向对象式（object-oriented）：正则表达式不属于语言的低级语法。相反，普通的函数接收普通的字符串，把它们作为正则表达式进行处理。由不同的函数进行不同的、关系到一个或多个正则表达式的操作。大多数语言（不包括Perl）采用的都是这两种方式之一，包括Java、.NET、Tcl、Python、PHP、Emacs、lisp和Ruby。当然，还有JavaScript。")])]),t._v(" "),s("h3",{attrs:{id:"集成式处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集成式处理"}},[t._v("#")]),t._v(" 集成式处理")]),t._v(" "),s("p",[t._v("Perl 会把正则表达式"),s("code",[t._v("^Subject:(.＊)")]),t._v("应用到"),s("code",[t._v("$line")]),t._v(" 保存的文本中，如果能够匹配，则执行下面的程序段。其中，变量"),s("code",[t._v("$1")]),t._v("代表括号内的子表达式匹配的文本，将它们赋值给"),s("code",[t._v("$subject")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-perl extra-class"},[s("pre",{pre:!0,attrs:{class:"language-perl"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$line")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=~")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("m/^Subject:(.*)/i")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$subject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"程序式和面向对象式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#程序式和面向对象式"}},[t._v("#")]),t._v(" 程序式和面向对象式")]),t._v(" "),s("p",[t._v("程序式处理和面向对象式处理非常相似。这两种方式下，正则功能不是由内建的操作符来提供，而是由普通函数（函数式）或构造函数及方法（面向对象式）来提供的。这种情况下，并没有专属于正则表达式的操作符，只有平常的字符串，普通的函数、构造函数和方法把这些字符串作为正则表达式来处理。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Subject:hello'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^Subject:(.*)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" subject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  subject "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Regex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^Subject:(.*)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" m2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[t._v("#")]),t._v(" 元字符")]),t._v(" "),s("p",[t._v("MDN正则表达式：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_expressions")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("元字符")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("\\s")]),t._v(" "),s("td",[t._v("任何空白字符，包括空格符、制表符、进纸符等")])]),t._v(" "),s("tr",[s("td",[t._v("\\S")]),t._v(" "),s("td",[t._v("除\\s以外的任何字符，等价于"),s("code",[t._v("[^\\s]")])])]),t._v(" "),s("tr",[s("td",[t._v("\\d")]),t._v(" "),s("td",[t._v("数字，即0-9")])]),t._v(" "),s("tr",[s("td",[t._v("\\D")]),t._v(" "),s("td",[t._v("除数字\\d之外的任何字符，即[^0-9]")])]),t._v(" "),s("tr",[s("td",[t._v("\\w")]),t._v(" "),s("td",[t._v("匹配字母数字下划线，即[a-zA-Z0-9_]")])]),t._v(" "),s("tr",[s("td",[t._v("\\W")]),t._v(" "),s("td",[t._v("除\\w以外的任何字符，也就是[^a-zA-Z0-9_]")])]),t._v(" "),s("tr",[s("td",[t._v("\\b")]),t._v(" "),s("td",[t._v("匹配一个词边界")])]),t._v(" "),s("tr",[s("td",[t._v("\\r")]),t._v(" "),s("td",[t._v("回车符")])]),t._v(" "),s("tr",[s("td",[t._v("\\n")]),t._v(" "),s("td",[t._v("换行符")])]),t._v(" "),s("tr",[s("td",[t._v("\\t")]),t._v(" "),s("td",[t._v("水平制表符")])]),t._v(" "),s("tr",[s("td",[t._v("\\v")]),t._v(" "),s("td",[t._v("垂直制表符")])]),t._v(" "),s("tr",[s("td",[t._v("[\\b]")]),t._v(" "),s("td",[t._v("退格符")])]),t._v(" "),s("tr",[s("td",[t._v("\\e")]),t._v(" "),s("td",[t._v("Escape字符")])])])]),t._v(" "),s("h3",{attrs:{id:"修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("修饰符")]),t._v(" "),s("th",[t._v("作用")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("g")]),t._v(" "),s("td",[t._v("全局匹配")])]),t._v(" "),s("tr",[s("td",[t._v("i")]),t._v(" "),s("td",[t._v("不区分大小写")])]),t._v(" "),s("tr",[s("td",[t._v("m")]),t._v(" "),s("td",[t._v("多行搜索")])]),t._v(" "),s("tr",[s("td",[t._v("s")]),t._v(" "),s("td",[t._v("允许"),s("code",[t._v(".")]),t._v("匹配换行符")])]),t._v(" "),s("tr",[s("td",[t._v("u")]),t._v(" "),s("td",[t._v("使用unicode码的模式进行匹配")])]),t._v(" "),s("tr",[s("td",[t._v("y")]),t._v(" "),s("td",[t._v("执行“粘性 ("),s("code",[t._v("sticky")]),t._v(")”搜索，匹配从目标字符串的当前位置开始。")])])])]),t._v(" "),s("h2",{attrs:{id:"第四章-正则表达式的匹配原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四章-正则表达式的匹配原理"}},[t._v("#")]),t._v(" 第四章 正则表达式的匹配原理")]),t._v(" "),s("h3",{attrs:{id:"正则表达式的零件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的零件"}},[t._v("#")]),t._v(" 正则表达式的零件")]),t._v(" "),s("ol",[s("li",[t._v("文字文本：例如a、\\＊、！、枝…\n"),s("ul",[s("li",[t._v("如果一个正则表达式只包含纯文本字符，例如"),s("code",[t._v("usa")]),t._v("，那么正则引擎会将其视为：一个"),s("code",[t._v("u")]),t._v("，接着一个"),s("code",[t._v("s")]),t._v("，接着一个"),s("code",[t._v("a")]),t._v("。进行不区分大小写的匹配时的情况要复杂一点，因为"),s("code",[t._v("b")]),t._v("能够匹配B，而"),s("code",[t._v("B")]),t._v("也能匹配b")])])]),t._v(" "),s("li",[t._v("字符组、点号、Unicode属性及其他\n"),s("ul",[s("li",[t._v("通常情况下，这种匹配是比较简单的：无论字符组的长度是多少，它都只能匹配一个字符。")]),t._v(" "),s("li",[t._v("点号可以很方便地表示复杂的字符组，它几乎能匹配所有字符，所以它的作用也很简\n单")]),t._v(" "),s("li",[t._v("其他的简便方式还包括"),s("code",[t._v("\\w")]),t._v("、"),s("code",[t._v("\\W")]),t._v("和"),s("code",[t._v("\\d")])])])]),t._v(" "),s("li",[t._v("捕获型括号\n"),s("ul",[s("li",[t._v("用于捕获文本的括号（而不是用于分组的括号）不会影响匹配的过程")])])]),t._v(" "),s("li",[t._v("锚点：例如，"),s("code",[t._v("^")]),t._v("、"),s("code",[t._v("\\z")]),t._v("、"),s("code",[t._v("(?<=\\d)")]),t._v(" "),s("ul",[s("li",[t._v("锚点可以分为两大类：简单锚点（^、$、\\G、\\b）和复杂锚点（例如顺序\n环视和逆序环视）。简单锚点之所以得名，就在于它们只是检查目标字符串中的特\n定位置的情况（^、\\Z），或者是比较两个相邻的字符（\\＜、\\b、…）。相反，复杂锚\n点（环视）能包含任意复杂的子表达式，所以它们也可以任意复杂。")])])])]),t._v(" "),s("h3",{attrs:{id:"匹配基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配基础"}},[t._v("#")]),t._v(" 匹配基础")]),t._v(" "),s("h4",{attrs:{id:"规则1-优先选择最左端-最靠开头-的匹配结果。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则1-优先选择最左端-最靠开头-的匹配结果。"}},[t._v("#")]),t._v(" 规则1：优先选择最左端（最靠开头）的匹配结果。")]),t._v(" "),s("p",[t._v("这条规则的由来是：匹配先从需要查找的字符串的起始位置尝试匹配。在这里，“尝试匹配（attempt）”的意思是，在当前位置测试整个正则表达式（可能很复杂）能匹配的每样文本。如果在当前位置测试了所有的可能之后不能找到匹配结果，就需要从字符串的第二个字符之前的位置开始重新尝试。在找到匹配结果以前必须在所有的位置重复此过程。只有在尝试过所有的起始位置（直到字符串的最后一个字符）都不能找到匹配结果的情况下，才会报告“匹配失败”。")]),t._v(" "),s("p",[t._v("如果要用「ORA」来匹配FLORAL，从字符串左边开始第一轮尝试会失败（因为「ORA」不能匹配FLO），第二轮尝试也会失败（「ORA」同样不能匹配LOR），从第三个字符开始的尝试能够成功，所以引擎会停下来，报告匹配结果。")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("fat|cat|belly|your")]),t._v("匹配 The dragging belly indicates that your cat is too fat. 结果是什么？")]),t._v(" "),s("p",[t._v("答案是：belly。")]),t._v(" "),s("p",[t._v("原因：尽管fat在最前面，而且正则表达式应该也能匹配到其它可能，但它们都不是最先出现的匹配结果，所以不会被选择。在下一轮尝试之前，正则表达式的所有可能都会尝试，也就是说，在移动之前，fat、cat、belly和yours都必须尝试。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The dragging belly indicates that your cat is too fat.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("fat|cat|belly|your")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"规则2-标准量词是匹配优先的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规则2-标准量词是匹配优先的"}},[t._v("#")]),t._v(" 规则2 标准量词是匹配优先的")]),t._v(" "),s("p",[t._v("标准匹配量词"),s("code",[t._v("?")]),t._v("、"),s("code",[t._v("*")]),t._v("、"),s("code",[t._v("+")]),t._v("以及"),s("code",[t._v("{min，max}")]),t._v("都是匹配优先（greedy）的。")]),t._v(" "),s("p",[t._v("简而言之，标准匹配量词的结果可能并非所有可能中最长的，但它们总是尝试匹配尽可能多的字符，直到匹配上限为止。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'March 1998'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[0-9]+")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['1998', index: 6, input: 'March 1998', groups: undefined]")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面的匹配到了所有数字，1匹配之后，实际上已经满足了成功的下限，但此正则表达式是匹配优先的，所以它不会停在此处，而会继续下去，继续匹配998，直到这个字符串的末尾。")]),t._v(" "),s("h5",{attrs:{id:"过度优先匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过度优先匹配"}},[t._v("#")]),t._v(" 过度优先匹配")]),t._v(" "),s("p",[t._v("来看一个正则表达式理解下这个规则：")]),t._v(" "),s("p",[t._v("正则表达式"),s("code",[t._v("/^.*([0-9][0-9])/")]),t._v("，能够匹配一行字符的最后两位数字，如果有的话，然后将它们存储在$1 中。下面是匹配的过程：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v(".*")]),t._v("首先过度优先匹配整行，而"),s("code",[t._v("[0-9] [0-9]")]),t._v("是必须匹配的，在尝试匹配行末的时候会失败，这样它会通知"),s("code",[t._v(".*")]),t._v("：“嗨，你占的太多了，交出一些字符来吧，这样我没准能匹配。”")])]),t._v(" "),s("li",[s("p",[t._v("匹配优先组件首先会匹配尽可能多的字符，但为了整个表达式的匹配，它们通常需要“释放”一些字符（抑制自己的天性）。当然，它们并不“愿意”这样做，只是不得已而为之。")])]),t._v(" "),s("li",[s("p",[t._v("当然，“交还”绝不能破坏匹配成立必须的条件，比如标准量词加号"),s("code",[t._v("+")]),t._v("的第一次匹配。")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'about 24 characters long'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^.*([0-9][0-9])")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['about 24', '24', index: 0, input: 'about 24 characters long', groups: undefined]")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("上面代码的实际匹配过程如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v(".*")]),t._v("匹配整个字符串以后，第一个"),s("code",[t._v("[0-9]")]),t._v("的匹配要求"),s("code",[t._v(".*")]),t._v("释放一个字符g（最后的字符）。但是这并不能让"),s("code",[t._v("[0-9]")]),t._v("匹配，所以"),s("code",[t._v(".*")]),t._v("必须继续“交还”字符，接下来交还的字符是n。如此循环15次，直到"),s("code",[t._v(".*")]),t._v("最终释放数字4为止。")]),t._v(" "),s("li",[t._v("不幸的是，即使第一个"),s("code",[t._v("[0-9]")]),t._v("能够匹配4，第二个"),s("code",[t._v("[0-9]")]),t._v("仍然不能匹配。为了匹配整个正则表达式，"),s("code",[t._v(".*")]),t._v("必须再次释放一个字符，这次是2，由第一个"),s("code",[t._v("[0-9]")]),t._v("匹配。")]),t._v(" "),s("li",[t._v("现在，4能够由第二个"),s("code",[t._v("[0-9]")]),t._v("匹配，所以整个表达式匹配的是"),s("em",[t._v("about 24")]),t._v("，"),s("code",[t._v("$1")]),t._v("的值是"),s("em",[t._v("24")]),t._v("。")])]),t._v(" "),s("h5",{attrs:{id:"先来先服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先来先服务"}},[t._v("#")]),t._v(" 先来先服务")]),t._v(" "),s("p",[t._v("如果用"),s("code",[t._v("/^.＊[0-9]+/")]),t._v("来匹配"),s("em",[t._v("Copyright 2003.")]),t._v(" ，括号会捕获到什么？")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Copyright 2003.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^.*([0-9]+)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  ['Copyright 2003', 'Copyright 200', '3', index: 0, input: 'Copyright 2003.', groups: undefined]")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这个表达式本意是捕获整个数字2003，但结果并非如此。因为过度有限匹配，"),s("code",[t._v("^.*")]),t._v("会首先匹配整行，为了满足"),s("code",[t._v("[0-9]+")]),t._v("的匹配，"),s("code",[t._v(".*")]),t._v("必须交还一些字符。在这个例子中，释放的字符是最后的3和点号，之后3能够由"),s("code",[t._v("[0-9]")]),t._v("匹配。"),s("code",[t._v("[0-9]")]),t._v("由 "),s("code",[t._v("+")]),t._v("量词修饰，所以现在还只做到了最小的匹配可能，现在它遇到了"),s("code",[t._v(".")]),t._v("，找不到其他可以匹配的字符。")]),t._v(" "),s("p",[t._v("与之前不同，此时没有“必须”匹配的元素，所以"),s("code",[t._v(".")]),t._v("不会被迫交出"),s("code",[t._v("0")]),t._v("。否则，"),s("code",[t._v("[0-9]+")]),t._v("应当心存感激，接受匹配优先元素的馈赠，但请记住“先来先服务”原则。匹配优先的结构只会在被迫的情况下交还字符。所以，最终"),s("code",[t._v("$1")]),t._v("的值是3。")]),t._v(" "),s("p",[t._v("注：这里所说的"),s("code",[t._v(".*")]),t._v("必须继续“交还”或许会引起混淆，这么说是便于理解，而且跟实际结果一致。真相是由基本的引擎类型决定的，是DFA还是NFA。")]),t._v(" "),s("h3",{attrs:{id:"nfa和dfa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nfa和dfa"}},[t._v("#")]),t._v(" NFA和DFA")])])}),[],!1,null,null,null);s.default=n.exports}}]);